
L6_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002718  08002718  00012718  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  2000000c  08002760  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000160  08002760  00020160  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001659c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b00  00000000  00000000  000365d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006ee5  00000000  00000000  000390d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a10  00000000  00000000  0003ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c60  00000000  00000000  000409d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000059e6  00000000  00000000  00041630  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d6f  00000000  00000000  00047016  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004ad85  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001e5c  00000000  00000000  0004ae04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002700 	.word	0x08002700

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002700 	.word	0x08002700

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b97a 	b.w	8000cb8 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	468c      	mov	ip, r1
 80009e2:	460d      	mov	r5, r1
 80009e4:	4604      	mov	r4, r0
 80009e6:	9e08      	ldr	r6, [sp, #32]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d151      	bne.n	8000a90 <__udivmoddi4+0xb4>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d96d      	bls.n	8000ace <__udivmoddi4+0xf2>
 80009f2:	fab2 fe82 	clz	lr, r2
 80009f6:	f1be 0f00 	cmp.w	lr, #0
 80009fa:	d00b      	beq.n	8000a14 <__udivmoddi4+0x38>
 80009fc:	f1ce 0c20 	rsb	ip, lr, #32
 8000a00:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a08:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a0c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a10:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a14:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a18:	0c25      	lsrs	r5, r4, #16
 8000a1a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a1e:	fa1f f987 	uxth.w	r9, r7
 8000a22:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a26:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a2a:	fb08 f309 	mul.w	r3, r8, r9
 8000a2e:	42ab      	cmp	r3, r5
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x6c>
 8000a32:	19ed      	adds	r5, r5, r7
 8000a34:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a38:	f080 8123 	bcs.w	8000c82 <__udivmoddi4+0x2a6>
 8000a3c:	42ab      	cmp	r3, r5
 8000a3e:	f240 8120 	bls.w	8000c82 <__udivmoddi4+0x2a6>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	443d      	add	r5, r7
 8000a48:	1aed      	subs	r5, r5, r3
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a50:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a58:	fb00 f909 	mul.w	r9, r0, r9
 8000a5c:	45a1      	cmp	r9, r4
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x98>
 8000a60:	19e4      	adds	r4, r4, r7
 8000a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a66:	f080 810a 	bcs.w	8000c7e <__udivmoddi4+0x2a2>
 8000a6a:	45a1      	cmp	r9, r4
 8000a6c:	f240 8107 	bls.w	8000c7e <__udivmoddi4+0x2a2>
 8000a70:	3802      	subs	r0, #2
 8000a72:	443c      	add	r4, r7
 8000a74:	eba4 0409 	sub.w	r4, r4, r9
 8000a78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d061      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000a82:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a86:	2300      	movs	r3, #0
 8000a88:	6034      	str	r4, [r6, #0]
 8000a8a:	6073      	str	r3, [r6, #4]
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d907      	bls.n	8000aa4 <__udivmoddi4+0xc8>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d054      	beq.n	8000b42 <__udivmoddi4+0x166>
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	fab3 f183 	clz	r1, r3
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	f040 808e 	bne.w	8000bca <__udivmoddi4+0x1ee>
 8000aae:	42ab      	cmp	r3, r5
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xdc>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80fa 	bhi.w	8000cac <__udivmoddi4+0x2d0>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb65 0503 	sbc.w	r5, r5, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	46ac      	mov	ip, r5
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d03f      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000ac6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	b912      	cbnz	r2, 8000ad6 <__udivmoddi4+0xfa>
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ad6:	fab7 fe87 	clz	lr, r7
 8000ada:	f1be 0f00 	cmp.w	lr, #0
 8000ade:	d134      	bne.n	8000b4a <__udivmoddi4+0x16e>
 8000ae0:	1beb      	subs	r3, r5, r7
 8000ae2:	0c3a      	lsrs	r2, r7, #16
 8000ae4:	fa1f fc87 	uxth.w	ip, r7
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb3 f8f2 	udiv	r8, r3, r2
 8000aee:	0c25      	lsrs	r5, r4, #16
 8000af0:	fb02 3318 	mls	r3, r2, r8, r3
 8000af4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000af8:	fb0c f308 	mul.w	r3, ip, r8
 8000afc:	42ab      	cmp	r3, r5
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x134>
 8000b00:	19ed      	adds	r5, r5, r7
 8000b02:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x132>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	f200 80d1 	bhi.w	8000cb0 <__udivmoddi4+0x2d4>
 8000b0e:	4680      	mov	r8, r0
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a3      	uxth	r3, r4
 8000b14:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b18:	fb02 5510 	mls	r5, r2, r0, r5
 8000b1c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b20:	fb0c fc00 	mul.w	ip, ip, r0
 8000b24:	45a4      	cmp	ip, r4
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x15c>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x15a>
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	f200 80b8 	bhi.w	8000ca6 <__udivmoddi4+0x2ca>
 8000b36:	4618      	mov	r0, r3
 8000b38:	eba4 040c 	sub.w	r4, r4, ip
 8000b3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b40:	e79d      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000b42:	4631      	mov	r1, r6
 8000b44:	4630      	mov	r0, r6
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	f1ce 0420 	rsb	r4, lr, #32
 8000b4e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b56:	fa20 f804 	lsr.w	r8, r0, r4
 8000b5a:	0c3a      	lsrs	r2, r7, #16
 8000b5c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b60:	ea48 0803 	orr.w	r8, r8, r3
 8000b64:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b68:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b6c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b78:	fb01 f30c 	mul.w	r3, r1, ip
 8000b7c:	42ab      	cmp	r3, r5
 8000b7e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x1bc>
 8000b84:	19ed      	adds	r5, r5, r7
 8000b86:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b8a:	f080 808a 	bcs.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	f240 8087 	bls.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b94:	3902      	subs	r1, #2
 8000b96:	443d      	add	r5, r7
 8000b98:	1aeb      	subs	r3, r5, r3
 8000b9a:	fa1f f588 	uxth.w	r5, r8
 8000b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ba2:	fb02 3310 	mls	r3, r2, r0, r3
 8000ba6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000baa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bae:	42ab      	cmp	r3, r5
 8000bb0:	d907      	bls.n	8000bc2 <__udivmoddi4+0x1e6>
 8000bb2:	19ed      	adds	r5, r5, r7
 8000bb4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bb8:	d26f      	bcs.n	8000c9a <__udivmoddi4+0x2be>
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	d96d      	bls.n	8000c9a <__udivmoddi4+0x2be>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	443d      	add	r5, r7
 8000bc2:	1aeb      	subs	r3, r5, r3
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	e78f      	b.n	8000aea <__udivmoddi4+0x10e>
 8000bca:	f1c1 0720 	rsb	r7, r1, #32
 8000bce:	fa22 f807 	lsr.w	r8, r2, r7
 8000bd2:	408b      	lsls	r3, r1
 8000bd4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bd8:	ea48 0303 	orr.w	r3, r8, r3
 8000bdc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000be0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bea:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bee:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000bf2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000bf6:	fa1f f883 	uxth.w	r8, r3
 8000bfa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bfe:	fb09 f408 	mul.w	r4, r9, r8
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	fa02 f201 	lsl.w	r2, r2, r1
 8000c08:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x244>
 8000c0e:	18ed      	adds	r5, r5, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c14:	d243      	bcs.n	8000c9e <__udivmoddi4+0x2c2>
 8000c16:	42ac      	cmp	r4, r5
 8000c18:	d941      	bls.n	8000c9e <__udivmoddi4+0x2c2>
 8000c1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1e:	441d      	add	r5, r3
 8000c20:	1b2d      	subs	r5, r5, r4
 8000c22:	fa1f fe8e 	uxth.w	lr, lr
 8000c26:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c2a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c2e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c32:	fb00 f808 	mul.w	r8, r0, r8
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x26e>
 8000c3a:	18e4      	adds	r4, r4, r3
 8000c3c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c40:	d229      	bcs.n	8000c96 <__udivmoddi4+0x2ba>
 8000c42:	45a0      	cmp	r8, r4
 8000c44:	d927      	bls.n	8000c96 <__udivmoddi4+0x2ba>
 8000c46:	3802      	subs	r0, #2
 8000c48:	441c      	add	r4, r3
 8000c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4e:	eba4 0408 	sub.w	r4, r4, r8
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	454c      	cmp	r4, r9
 8000c58:	46c6      	mov	lr, r8
 8000c5a:	464d      	mov	r5, r9
 8000c5c:	d315      	bcc.n	8000c8a <__udivmoddi4+0x2ae>
 8000c5e:	d012      	beq.n	8000c86 <__udivmoddi4+0x2aa>
 8000c60:	b156      	cbz	r6, 8000c78 <__udivmoddi4+0x29c>
 8000c62:	ebba 030e 	subs.w	r3, sl, lr
 8000c66:	eb64 0405 	sbc.w	r4, r4, r5
 8000c6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6e:	40cb      	lsrs	r3, r1
 8000c70:	431f      	orrs	r7, r3
 8000c72:	40cc      	lsrs	r4, r1
 8000c74:	6037      	str	r7, [r6, #0]
 8000c76:	6074      	str	r4, [r6, #4]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e6f8      	b.n	8000a74 <__udivmoddi4+0x98>
 8000c82:	4690      	mov	r8, r2
 8000c84:	e6e0      	b.n	8000a48 <__udivmoddi4+0x6c>
 8000c86:	45c2      	cmp	sl, r8
 8000c88:	d2ea      	bcs.n	8000c60 <__udivmoddi4+0x284>
 8000c8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c92:	3801      	subs	r0, #1
 8000c94:	e7e4      	b.n	8000c60 <__udivmoddi4+0x284>
 8000c96:	4628      	mov	r0, r5
 8000c98:	e7d7      	b.n	8000c4a <__udivmoddi4+0x26e>
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	e791      	b.n	8000bc2 <__udivmoddi4+0x1e6>
 8000c9e:	4681      	mov	r9, r0
 8000ca0:	e7be      	b.n	8000c20 <__udivmoddi4+0x244>
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	e778      	b.n	8000b98 <__udivmoddi4+0x1bc>
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	e745      	b.n	8000b38 <__udivmoddi4+0x15c>
 8000cac:	4608      	mov	r0, r1
 8000cae:	e708      	b.n	8000ac2 <__udivmoddi4+0xe6>
 8000cb0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb4:	443d      	add	r5, r7
 8000cb6:	e72b      	b.n	8000b10 <__udivmoddi4+0x134>

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_InitTick+0x3c>)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_InitTick+0x40>)
{
 8000cc2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	7818      	ldrb	r0, [r3, #0]
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cce:	6810      	ldr	r0, [r2, #0]
 8000cd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cd4:	f000 fae4 	bl	80012a0 <HAL_SYSTICK_Config>
 8000cd8:	4604      	mov	r4, r0
 8000cda:	b958      	cbnz	r0, 8000cf4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cdc:	2d0f      	cmp	r5, #15
 8000cde:	d809      	bhi.n	8000cf4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 fa9a 	bl	8001220 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_InitTick+0x44>)
 8000cee:	4620      	mov	r0, r4
 8000cf0:	601d      	str	r5, [r3, #0]
 8000cf2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_Init>:
{
 8000d04:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x30>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 fa6b 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ffc8 	bl	8000cbc <HAL_InitTick>
  HAL_MspInit();
 8000d2c:	f001 fb98 	bl	8002460 <HAL_MspInit>
}
 8000d30:	2000      	movs	r0, #0
 8000d32:	bd08      	pop	{r3, pc}
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <HAL_IncTick+0x10>)
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_IncTick+0x14>)
 8000d3c:	6811      	ldr	r1, [r2, #0]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	440b      	add	r3, r1
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000048 	.word	0x20000048
 8000d4c:	20000000 	.word	0x20000000

08000d50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d50:	4b01      	ldr	r3, [pc, #4]	; (8000d58 <HAL_GetTick+0x8>)
 8000d52:	6818      	ldr	r0, [r3, #0]
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000048 	.word	0x20000048

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff fff6 	bl	8000d50 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d64:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	bf1c      	itt	ne
 8000d68:	4b05      	ldrne	r3, [pc, #20]	; (8000d80 <HAL_Delay+0x24>)
 8000d6a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	bf18      	it	ne
 8000d70:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d72:	f7ff ffed 	bl	8000d50 <HAL_GetTick>
 8000d76:	1b40      	subs	r0, r0, r5
 8000d78:	4284      	cmp	r4, r0
 8000d7a:	d8fa      	bhi.n	8000d72 <HAL_Delay+0x16>
  {
  }
}
 8000d7c:	bd38      	pop	{r3, r4, r5, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000

08000d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d84:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d86:	4604      	mov	r4, r0
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	f000 8099 	beq.w	8000ec0 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d90:	b923      	cbnz	r3, 8000d9c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d92:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d98:	f001 fb92 	bl	80024c0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d9e:	06db      	lsls	r3, r3, #27
 8000da0:	f100 808c 	bmi.w	8000ebc <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000daa:	f023 0302 	bic.w	r3, r3, #2
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000db4:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <HAL_ADC_Init+0x140>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000dbc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	6861      	ldr	r1, [r4, #4]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dc6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dc8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dda:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ddc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dde:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000de2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dea:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dec:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dfa:	4933      	ldr	r1, [pc, #204]	; (8000ec8 <HAL_ADC_Init+0x144>)
 8000dfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dfe:	428a      	cmp	r2, r1
 8000e00:	d050      	beq.n	8000ea4 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e02:	6899      	ldr	r1, [r3, #8]
 8000e04:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000e08:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e0a:	6899      	ldr	r1, [r3, #8]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e10:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e1e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e20:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e22:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e24:	f022 0202 	bic.w	r2, r2, #2
 8000e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e32:	6a22      	ldr	r2, [r4, #32]
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	d03d      	beq.n	8000eb4 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e38:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e40:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e48:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	3901      	subs	r1, #1
 8000e4e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e56:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e58:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e60:	3901      	subs	r1, #1
 8000e62:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e68:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000e78:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e7a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e7c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e84:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e86:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e88:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e8c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000ea2:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eb2:	e7b4      	b.n	8000e1e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eba:	e7ca      	b.n	8000e52 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	e7ed      	b.n	8000e9c <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
}
 8000ec2:	bd10      	pop	{r4, pc}
 8000ec4:	40012300 	.word	0x40012300
 8000ec8:	0f000001 	.word	0x0f000001

08000ecc <HAL_ADC_Start_IT>:
{
 8000ecc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000ed2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d054      	beq.n	8000f84 <HAL_ADC_Start_IT+0xb8>
 8000eda:	2301      	movs	r3, #1
 8000edc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	07d1      	lsls	r1, r2, #31
 8000ee6:	d505      	bpl.n	8000ef4 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	07d2      	lsls	r2, r2, #31
 8000eec:	d414      	bmi.n	8000f18 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8000eee:	2000      	movs	r0, #0
}
 8000ef0:	b002      	add	sp, #8
 8000ef2:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000ef4:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef6:	4924      	ldr	r1, [pc, #144]	; (8000f88 <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 8000ef8:	f042 0201 	orr.w	r2, r2, #1
 8000efc:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <HAL_ADC_Start_IT+0xc0>)
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	fbb2 f2f1 	udiv	r2, r2, r1
 8000f06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000f0a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000f0c:	9a01      	ldr	r2, [sp, #4]
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d0ea      	beq.n	8000ee8 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8000f12:	9a01      	ldr	r2, [sp, #4]
 8000f14:	3a01      	subs	r2, #1
 8000f16:	e7f8      	b.n	8000f0a <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000f18:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f26:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f2c:	bf41      	itttt	mi
 8000f2e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000f30:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000f34:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000f38:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f40:	bf1c      	itt	ne
 8000f42:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000f44:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000f48:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f50:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f54:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f5c:	f042 0220 	orr.w	r2, r2, #32
 8000f60:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_ADC_Start_IT+0xc4>)
 8000f64:	6852      	ldr	r2, [r2, #4]
 8000f66:	06d2      	lsls	r2, r2, #27
 8000f68:	d108      	bne.n	8000f7c <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f6a:	6898      	ldr	r0, [r3, #8]
 8000f6c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000f70:	d1bd      	bne.n	8000eee <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	e7b9      	b.n	8000ef0 <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_ADC_Start_IT+0xc8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d1b5      	bne.n	8000eee <HAL_ADC_Start_IT+0x22>
 8000f82:	e7f2      	b.n	8000f6a <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 8000f84:	2002      	movs	r0, #2
 8000f86:	e7b3      	b.n	8000ef0 <HAL_ADC_Start_IT+0x24>
 8000f88:	000f4240 	.word	0x000f4240
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	40012300 	.word	0x40012300
 8000f94:	40012000 	.word	0x40012000

08000f98 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000f98:	6803      	ldr	r3, [r0, #0]
 8000f9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000f9c:	4770      	bx	lr

08000f9e <HAL_ADC_LevelOutOfWindowCallback>:
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_ADC_ErrorCallback>:
{
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_ADC_IRQHandler>:
{
 8000fa2:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000fa4:	6803      	ldr	r3, [r0, #0]
 8000fa6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000fa8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000faa:	078d      	lsls	r5, r1, #30
{
 8000fac:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8000fae:	d52b      	bpl.n	8001008 <HAL_ADC_IRQHandler+0x66>
 8000fb0:	0690      	lsls	r0, r2, #26
 8000fb2:	d529      	bpl.n	8001008 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fb6:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fb8:	bf5e      	ittt	pl
 8000fba:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000fbc:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000fc0:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000fc8:	d117      	bne.n	8000ffa <HAL_ADC_IRQHandler+0x58>
 8000fca:	69a2      	ldr	r2, [r4, #24]
 8000fcc:	b9aa      	cbnz	r2, 8000ffa <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fd0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000fd4:	d002      	beq.n	8000fdc <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000fd6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fd8:	0552      	lsls	r2, r2, #21
 8000fda:	d40e      	bmi.n	8000ffa <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	f022 0220 	bic.w	r2, r2, #32
 8000fe2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fea:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fee:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ff0:	bf5e      	ittt	pl
 8000ff2:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000ff4:	f043 0301 	orrpl.w	r3, r3, #1
 8000ff8:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f001 f880 	bl	8002100 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	f06f 0212 	mvn.w	r2, #18
 8001006:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800100c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800100e:	074d      	lsls	r5, r1, #29
 8001010:	d532      	bpl.n	8001078 <HAL_ADC_IRQHandler+0xd6>
 8001012:	0610      	lsls	r0, r2, #24
 8001014:	d530      	bpl.n	8001078 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001016:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001018:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800101a:	bf5e      	ittt	pl
 800101c:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800101e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001022:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800102a:	d11e      	bne.n	800106a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800102c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800102e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001032:	d002      	beq.n	800103a <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001034:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001036:	0552      	lsls	r2, r2, #21
 8001038:	d417      	bmi.n	800106a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800103a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800103c:	0555      	lsls	r5, r2, #21
 800103e:	d414      	bmi.n	800106a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001040:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001042:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001046:	d110      	bne.n	800106a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001048:	69a2      	ldr	r2, [r4, #24]
 800104a:	b972      	cbnz	r2, 800106a <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001052:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800105a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800105c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800105e:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001060:	bf5e      	ittt	pl
 8001062:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001064:	f043 0301 	orrpl.w	r3, r3, #1
 8001068:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800106a:	4620      	mov	r0, r4
 800106c:	f000 f8c4 	bl	80011f8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	f06f 020c 	mvn.w	r2, #12
 8001076:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800107c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800107e:	07c9      	lsls	r1, r1, #31
 8001080:	d50f      	bpl.n	80010a2 <HAL_ADC_IRQHandler+0x100>
 8001082:	0655      	lsls	r5, r2, #25
 8001084:	d50d      	bpl.n	80010a2 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	07d8      	lsls	r0, r3, #31
 800108a:	d50a      	bpl.n	80010a2 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800108c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001092:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff ff82 	bl	8000f9e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f06f 0201 	mvn.w	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80010a6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010a8:	0689      	lsls	r1, r1, #26
 80010aa:	d50d      	bpl.n	80010c8 <HAL_ADC_IRQHandler+0x126>
 80010ac:	0152      	lsls	r2, r2, #5
 80010ae:	d50b      	bpl.n	80010c8 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010b2:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010b6:	f042 0202 	orr.w	r2, r2, #2
 80010ba:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 80010bc:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010be:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80010c0:	f7ff ff6e 	bl	8000fa0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	601d      	str	r5, [r3, #0]
 80010c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080010cc <HAL_ADC_ConfigChannel>:
{
 80010cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	f000 8083 	beq.w	80011e2 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010dc:	680d      	ldr	r5, [r1, #0]
 80010de:	6804      	ldr	r4, [r0, #0]
 80010e0:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80010e2:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010e4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80010e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80010ea:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010ec:	d92a      	bls.n	8001144 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010ee:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80010f2:	68e7      	ldr	r7, [r4, #12]
 80010f4:	3b1e      	subs	r3, #30
 80010f6:	f04f 0e07 	mov.w	lr, #7
 80010fa:	fa0e fe03 	lsl.w	lr, lr, r3
 80010fe:	ea27 070e 	bic.w	r7, r7, lr
 8001102:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001104:	68e7      	ldr	r7, [r4, #12]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	433b      	orrs	r3, r7
 800110c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800110e:	684a      	ldr	r2, [r1, #4]
 8001110:	2a06      	cmp	r2, #6
 8001112:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001116:	d825      	bhi.n	8001164 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001118:	4413      	add	r3, r2
 800111a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800111c:	1f59      	subs	r1, r3, #5
 800111e:	231f      	movs	r3, #31
 8001120:	408b      	lsls	r3, r1
 8001122:	ea27 0303 	bic.w	r3, r7, r3
 8001126:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001128:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800112a:	fa06 f101 	lsl.w	r1, r6, r1
 800112e:	4311      	orrs	r1, r2
 8001130:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_ADC_ConfigChannel+0x11c>)
 8001134:	429c      	cmp	r4, r3
 8001136:	d034      	beq.n	80011a2 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001138:	2300      	movs	r3, #0
 800113a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800113e:	4618      	mov	r0, r3
}
 8001140:	b003      	add	sp, #12
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001144:	6927      	ldr	r7, [r4, #16]
 8001146:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800114a:	f04f 0e07 	mov.w	lr, #7
 800114e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001152:	ea27 070e 	bic.w	r7, r7, lr
 8001156:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001158:	6927      	ldr	r7, [r4, #16]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	433b      	orrs	r3, r7
 8001160:	6123      	str	r3, [r4, #16]
 8001162:	e7d4      	b.n	800110e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001164:	2a0c      	cmp	r2, #12
 8001166:	d80e      	bhi.n	8001186 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001168:	4413      	add	r3, r2
 800116a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800116c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001170:	231f      	movs	r3, #31
 8001172:	4093      	lsls	r3, r2
 8001174:	ea21 0303 	bic.w	r3, r1, r3
 8001178:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800117a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800117c:	fa06 f202 	lsl.w	r2, r6, r2
 8001180:	431a      	orrs	r2, r3
 8001182:	6322      	str	r2, [r4, #48]	; 0x30
 8001184:	e7d5      	b.n	8001132 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001186:	4413      	add	r3, r2
 8001188:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800118a:	3b41      	subs	r3, #65	; 0x41
 800118c:	221f      	movs	r2, #31
 800118e:	409a      	lsls	r2, r3
 8001190:	ea21 0202 	bic.w	r2, r1, r2
 8001194:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001196:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001198:	fa06 f103 	lsl.w	r1, r6, r3
 800119c:	4311      	orrs	r1, r2
 800119e:	62e1      	str	r1, [r4, #44]	; 0x2c
 80011a0:	e7c7      	b.n	8001132 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011a2:	2d12      	cmp	r5, #18
 80011a4:	d104      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_ADC_ConfigChannel+0x120>)
 80011a8:	6853      	ldr	r3, [r2, #4]
 80011aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ae:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011b0:	f1a5 0310 	sub.w	r3, r5, #16
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d8bf      	bhi.n	8001138 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_ADC_ConfigChannel+0x120>)
 80011ba:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011bc:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011c2:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011c4:	d1b8      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_ADC_ConfigChannel+0x124>)
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_ADC_ConfigChannel+0x128>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80011d0:	230a      	movs	r3, #10
 80011d2:	4353      	muls	r3, r2
        counter--;
 80011d4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80011d6:	9b01      	ldr	r3, [sp, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0ad      	beq.n	8001138 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80011dc:	9b01      	ldr	r3, [sp, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	e7f8      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80011e2:	2002      	movs	r0, #2
 80011e4:	e7ac      	b.n	8001140 <HAL_ADC_ConfigChannel+0x74>
 80011e6:	bf00      	nop
 80011e8:	40012000 	.word	0x40012000
 80011ec:	40012300 	.word	0x40012300
 80011f0:	20000008 	.word	0x20000008
 80011f4:	000f4240 	.word	0x000f4240

080011f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011fe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001200:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800120c:	0200      	lsls	r0, r0, #8
 800120e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001212:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001216:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001218:	60d3      	str	r3, [r2, #12]
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b530      	push	{r4, r5, lr}
 8001224:	68dc      	ldr	r4, [r3, #12]
 8001226:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	2b04      	cmp	r3, #4
 8001232:	bf28      	it	cs
 8001234:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 0501 	mov.w	r5, #1
 800123c:	fa05 f303 	lsl.w	r3, r5, r3
 8001240:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001244:	bf8c      	ite	hi
 8001246:	3c03      	subhi	r4, #3
 8001248:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124a:	4019      	ands	r1, r3
 800124c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124e:	fa05 f404 	lsl.w	r4, r5, r4
 8001252:	3c01      	subs	r4, #1
 8001254:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001256:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	ea42 0201 	orr.w	r2, r2, r1
 800125c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	bfaf      	iteee	ge
 8001262:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	f000 000f 	andlt.w	r0, r0, #15
 800126a:	4b06      	ldrlt	r3, [pc, #24]	; (8001284 <HAL_NVIC_SetPriority+0x64>)
 800126c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	bfa5      	ittet	ge
 8001270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001274:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800127c:	bd30      	pop	{r4, r5, pc}
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	e000ed14 	.word	0xe000ed14

08001288 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001288:	0942      	lsrs	r2, r0, #5
 800128a:	2301      	movs	r3, #1
 800128c:	f000 001f 	and.w	r0, r0, #31
 8001290:	fa03 f000 	lsl.w	r0, r3, r0
 8001294:	4b01      	ldr	r3, [pc, #4]	; (800129c <HAL_NVIC_EnableIRQ+0x14>)
 8001296:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100

080012a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	3801      	subs	r0, #1
 80012a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012a6:	d20a      	bcs.n	80012be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	21f0      	movs	r1, #240	; 0xf0
 80012b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012ce:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012d0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012d2:	bf0c      	ite	eq
 80012d4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012d8:	f022 0204 	bicne.w	r2, r2, #4
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	4770      	bx	lr
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80012e4:	4770      	bx	lr

080012e6 <HAL_SYSTICK_IRQHandler>:
{
 80012e6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80012e8:	f7ff fffc 	bl	80012e4 <HAL_SYSTICK_Callback>
 80012ec:	bd08      	pop	{r3, pc}
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001498 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fc:	4a64      	ldr	r2, [pc, #400]	; (8001490 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001300:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001304:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001308:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001310:	42b7      	cmp	r7, r6
 8001312:	f040 80ad 	bne.w	8001470 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001316:	684c      	ldr	r4, [r1, #4]
 8001318:	f024 0a10 	bic.w	sl, r4, #16
 800131c:	f1ba 0f02 	cmp.w	sl, #2
 8001320:	d116      	bne.n	8001350 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001322:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001326:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800132e:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001336:	f04f 0e0f 	mov.w	lr, #15
 800133a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800133e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001342:	690d      	ldr	r5, [r1, #16]
 8001344:	fa05 f50b 	lsl.w	r5, r5, fp
 8001348:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800134c:	f8cc 5020 	str.w	r5, [ip, #32]
 8001350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001354:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001356:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135a:	fa05 f50c 	lsl.w	r5, r5, ip
 800135e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001364:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001370:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001374:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001378:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800137a:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137e:	d815      	bhi.n	80013ac <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001380:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001384:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001388:	68cd      	ldr	r5, [r1, #12]
 800138a:	fa05 fa0c 	lsl.w	sl, r5, ip
 800138e:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8001392:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001396:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139a:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800139e:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80013a2:	fa0e fe03 	lsl.w	lr, lr, r3
 80013a6:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80013aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	9d00      	ldr	r5, [sp, #0]
 80013b0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b2:	688f      	ldr	r7, [r1, #8]
 80013b4:	fa07 f70c 	lsl.w	r7, r7, ip
 80013b8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013ba:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013bc:	00e5      	lsls	r5, r4, #3
 80013be:	d557      	bpl.n	8001470 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	f04f 0b00 	mov.w	fp, #0
 80013c4:	f8cd b00c 	str.w	fp, [sp, #12]
 80013c8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013cc:	4d31      	ldr	r5, [pc, #196]	; (8001494 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80013d2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80013d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80013da:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80013de:	9703      	str	r7, [sp, #12]
 80013e0:	9f03      	ldr	r7, [sp, #12]
 80013e2:	f023 0703 	bic.w	r7, r3, #3
 80013e6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013ea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ee:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80013f2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013fa:	f04f 0e0f 	mov.w	lr, #15
 80013fe:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001408:	d039      	beq.n	800147e <HAL_GPIO_Init+0x18e>
 800140a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140e:	42a8      	cmp	r0, r5
 8001410:	d037      	beq.n	8001482 <HAL_GPIO_Init+0x192>
 8001412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001416:	42a8      	cmp	r0, r5
 8001418:	d035      	beq.n	8001486 <HAL_GPIO_Init+0x196>
 800141a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141e:	42a8      	cmp	r0, r5
 8001420:	d033      	beq.n	800148a <HAL_GPIO_Init+0x19a>
 8001422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001426:	42a8      	cmp	r0, r5
 8001428:	bf14      	ite	ne
 800142a:	2507      	movne	r5, #7
 800142c:	2504      	moveq	r5, #4
 800142e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001432:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001436:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001438:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800143a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001440:	bf0c      	ite	eq
 8001442:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001444:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001446:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001448:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800144e:	bf0c      	ite	eq
 8001450:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001452:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001454:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001458:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800145c:	bf0c      	ite	eq
 800145e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001460:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001462:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001466:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001468:	bf54      	ite	pl
 800146a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800146c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800146e:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001470:	3301      	adds	r3, #1
 8001472:	2b10      	cmp	r3, #16
 8001474:	f47f af47 	bne.w	8001306 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001478:	b005      	add	sp, #20
 800147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	465d      	mov	r5, fp
 8001480:	e7d5      	b.n	800142e <HAL_GPIO_Init+0x13e>
 8001482:	2501      	movs	r5, #1
 8001484:	e7d3      	b.n	800142e <HAL_GPIO_Init+0x13e>
 8001486:	2502      	movs	r5, #2
 8001488:	e7d1      	b.n	800142e <HAL_GPIO_Init+0x13e>
 800148a:	2503      	movs	r5, #3
 800148c:	e7cf      	b.n	800142e <HAL_GPIO_Init+0x13e>
 800148e:	bf00      	nop
 8001490:	40013c00 	.word	0x40013c00
 8001494:	40020000 	.word	0x40020000
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	b10a      	cbz	r2, 80014a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	6181      	str	r1, [r0, #24]
 80014a0:	4770      	bx	lr
 80014a2:	0409      	lsls	r1, r1, #16
 80014a4:	e7fb      	b.n	800149e <HAL_GPIO_WritePin+0x2>
	...

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	4604      	mov	r4, r0
 80014ae:	b918      	cbnz	r0, 80014b8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80014b2:	b002      	add	sp, #8
 80014b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	07dd      	lsls	r5, r3, #31
 80014bc:	d410      	bmi.n	80014e0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	0798      	lsls	r0, r3, #30
 80014c2:	d458      	bmi.n	8001576 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	071a      	lsls	r2, r3, #28
 80014c8:	f100 809a 	bmi.w	8001600 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	075b      	lsls	r3, r3, #29
 80014d0:	f100 80b8 	bmi.w	8001644 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d4:	69a2      	ldr	r2, [r4, #24]
 80014d6:	2a00      	cmp	r2, #0
 80014d8:	f040 8119 	bne.w	800170e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80014dc:	2000      	movs	r0, #0
 80014de:	e7e8      	b.n	80014b2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e0:	4ba6      	ldr	r3, [pc, #664]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	f002 020c 	and.w	r2, r2, #12
 80014e8:	2a04      	cmp	r2, #4
 80014ea:	d007      	beq.n	80014fc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f2:	2a08      	cmp	r2, #8
 80014f4:	d10a      	bne.n	800150c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	0259      	lsls	r1, r3, #9
 80014fa:	d507      	bpl.n	800150c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	4b9f      	ldr	r3, [pc, #636]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	039a      	lsls	r2, r3, #14
 8001502:	d5dc      	bpl.n	80014be <HAL_RCC_OscConfig+0x16>
 8001504:	6863      	ldr	r3, [r4, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1d9      	bne.n	80014be <HAL_RCC_OscConfig+0x16>
 800150a:	e7d1      	b.n	80014b0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	6863      	ldr	r3, [r4, #4]
 800150e:	4d9b      	ldr	r5, [pc, #620]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d111      	bne.n	800153a <HAL_RCC_OscConfig+0x92>
 8001516:	682b      	ldr	r3, [r5, #0]
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800151e:	f7ff fc17 	bl	8000d50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4d96      	ldr	r5, [pc, #600]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001524:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	682b      	ldr	r3, [r5, #0]
 8001528:	039b      	lsls	r3, r3, #14
 800152a:	d4c8      	bmi.n	80014be <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fc10 	bl	8000d50 <HAL_GetTick>
 8001530:	1b80      	subs	r0, r0, r6
 8001532:	2864      	cmp	r0, #100	; 0x64
 8001534:	d9f7      	bls.n	8001526 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
 8001538:	e7bb      	b.n	80014b2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153e:	d104      	bne.n	800154a <HAL_RCC_OscConfig+0xa2>
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001546:	602b      	str	r3, [r5, #0]
 8001548:	e7e5      	b.n	8001516 <HAL_RCC_OscConfig+0x6e>
 800154a:	682a      	ldr	r2, [r5, #0]
 800154c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001550:	602a      	str	r2, [r5, #0]
 8001552:	682a      	ldr	r2, [r5, #0]
 8001554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001558:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1df      	bne.n	800151e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800155e:	f7ff fbf7 	bl	8000d50 <HAL_GetTick>
 8001562:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	039f      	lsls	r7, r3, #14
 8001568:	d5a9      	bpl.n	80014be <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156a:	f7ff fbf1 	bl	8000d50 <HAL_GetTick>
 800156e:	1b80      	subs	r0, r0, r6
 8001570:	2864      	cmp	r0, #100	; 0x64
 8001572:	d9f7      	bls.n	8001564 <HAL_RCC_OscConfig+0xbc>
 8001574:	e7df      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001576:	4b81      	ldr	r3, [pc, #516]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	f012 0f0c 	tst.w	r2, #12
 800157e:	d007      	beq.n	8001590 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	2a08      	cmp	r2, #8
 8001588:	d111      	bne.n	80015ae <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	025e      	lsls	r6, r3, #9
 800158e:	d40e      	bmi.n	80015ae <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001590:	4b7a      	ldr	r3, [pc, #488]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	0795      	lsls	r5, r2, #30
 8001596:	d502      	bpl.n	800159e <HAL_RCC_OscConfig+0xf6>
 8001598:	68e2      	ldr	r2, [r4, #12]
 800159a:	2a01      	cmp	r2, #1
 800159c:	d188      	bne.n	80014b0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	6921      	ldr	r1, [r4, #16]
 80015a2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015a6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80015aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ac:	e78a      	b.n	80014c4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ae:	68e2      	ldr	r2, [r4, #12]
 80015b0:	4b73      	ldr	r3, [pc, #460]	; (8001780 <HAL_RCC_OscConfig+0x2d8>)
 80015b2:	b1b2      	cbz	r2, 80015e2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015b8:	f7ff fbca 	bl	8000d50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	4d6f      	ldr	r5, [pc, #444]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80015be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	0798      	lsls	r0, r3, #30
 80015c4:	d507      	bpl.n	80015d6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	6922      	ldr	r2, [r4, #16]
 80015ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015d2:	602b      	str	r3, [r5, #0]
 80015d4:	e776      	b.n	80014c4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fbbb 	bl	8000d50 <HAL_GetTick>
 80015da:	1b80      	subs	r0, r0, r6
 80015dc:	2802      	cmp	r0, #2
 80015de:	d9ef      	bls.n	80015c0 <HAL_RCC_OscConfig+0x118>
 80015e0:	e7a9      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80015e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015e4:	f7ff fbb4 	bl	8000d50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e8:	4d64      	ldr	r5, [pc, #400]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80015ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	0799      	lsls	r1, r3, #30
 80015f0:	f57f af68 	bpl.w	80014c4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fbac 	bl	8000d50 <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9f6      	bls.n	80015ec <HAL_RCC_OscConfig+0x144>
 80015fe:	e79a      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001600:	6962      	ldr	r2, [r4, #20]
 8001602:	4b60      	ldr	r3, [pc, #384]	; (8001784 <HAL_RCC_OscConfig+0x2dc>)
 8001604:	b17a      	cbz	r2, 8001626 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800160a:	f7ff fba1 	bl	8000d50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160e:	4d5b      	ldr	r5, [pc, #364]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001610:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001614:	079f      	lsls	r7, r3, #30
 8001616:	f53f af59 	bmi.w	80014cc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fb99 	bl	8000d50 <HAL_GetTick>
 800161e:	1b80      	subs	r0, r0, r6
 8001620:	2802      	cmp	r0, #2
 8001622:	d9f6      	bls.n	8001612 <HAL_RCC_OscConfig+0x16a>
 8001624:	e787      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001626:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001628:	f7ff fb92 	bl	8000d50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4d53      	ldr	r5, [pc, #332]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800162e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001632:	0798      	lsls	r0, r3, #30
 8001634:	f57f af4a 	bpl.w	80014cc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fb8a 	bl	8000d50 <HAL_GetTick>
 800163c:	1b80      	subs	r0, r0, r6
 800163e:	2802      	cmp	r0, #2
 8001640:	d9f6      	bls.n	8001630 <HAL_RCC_OscConfig+0x188>
 8001642:	e778      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001644:	4b4d      	ldr	r3, [pc, #308]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 8001646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001648:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800164c:	d128      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001662:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4d48      	ldr	r5, [pc, #288]	; (8001788 <HAL_RCC_OscConfig+0x2e0>)
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	05d9      	lsls	r1, r3, #23
 800166a:	d51b      	bpl.n	80016a4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	68a3      	ldr	r3, [r4, #8]
 800166e:	4d43      	ldr	r5, [pc, #268]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 8001670:	2b01      	cmp	r3, #1
 8001672:	d127      	bne.n	80016c4 <HAL_RCC_OscConfig+0x21c>
 8001674:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800167c:	f7ff fb68 	bl	8000d50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4d3e      	ldr	r5, [pc, #248]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001682:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001684:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800168a:	079b      	lsls	r3, r3, #30
 800168c:	d539      	bpl.n	8001702 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800168e:	2e00      	cmp	r6, #0
 8001690:	f43f af20 	beq.w	80014d4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001694:	4a39      	ldr	r2, [pc, #228]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 8001696:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	e719      	b.n	80014d4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80016a0:	2600      	movs	r6, #0
 80016a2:	e7df      	b.n	8001664 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb50 	bl	8000d50 <HAL_GetTick>
 80016b0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	05da      	lsls	r2, r3, #23
 80016b6:	d4d9      	bmi.n	800166c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7ff fb4a 	bl	8000d50 <HAL_GetTick>
 80016bc:	1bc0      	subs	r0, r0, r7
 80016be:	2802      	cmp	r0, #2
 80016c0:	d9f7      	bls.n	80016b2 <HAL_RCC_OscConfig+0x20a>
 80016c2:	e738      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d104      	bne.n	80016d2 <HAL_RCC_OscConfig+0x22a>
 80016c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	672b      	str	r3, [r5, #112]	; 0x70
 80016d0:	e7d0      	b.n	8001674 <HAL_RCC_OscConfig+0x1cc>
 80016d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	672a      	str	r2, [r5, #112]	; 0x70
 80016da:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016dc:	f022 0204 	bic.w	r2, r2, #4
 80016e0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ca      	bne.n	800167c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb33 	bl	8000d50 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016ee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016f2:	0798      	lsls	r0, r3, #30
 80016f4:	d5cb      	bpl.n	800168e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fb2b 	bl	8000d50 <HAL_GetTick>
 80016fa:	1bc0      	subs	r0, r0, r7
 80016fc:	4540      	cmp	r0, r8
 80016fe:	d9f7      	bls.n	80016f0 <HAL_RCC_OscConfig+0x248>
 8001700:	e719      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fb25 	bl	8000d50 <HAL_GetTick>
 8001706:	1bc0      	subs	r0, r0, r7
 8001708:	4540      	cmp	r0, r8
 800170a:	d9bd      	bls.n	8001688 <HAL_RCC_OscConfig+0x1e0>
 800170c:	e713      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800170e:	4d1b      	ldr	r5, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
 8001710:	68ab      	ldr	r3, [r5, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	f43f aeca 	beq.w	80014b0 <HAL_RCC_OscConfig+0x8>
 800171c:	4e1b      	ldr	r6, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x2e4>)
 800171e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001720:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001722:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001724:	d134      	bne.n	8001790 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001726:	f7ff fb13 	bl	8000d50 <HAL_GetTick>
 800172a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	0199      	lsls	r1, r3, #6
 8001730:	d41e      	bmi.n	8001770 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001732:	6a22      	ldr	r2, [r4, #32]
 8001734:	69e3      	ldr	r3, [r4, #28]
 8001736:	4313      	orrs	r3, r2
 8001738:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800173a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800173e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001740:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001744:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4c0d      	ldr	r4, [pc, #52]	; (800177c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	3a01      	subs	r2, #1
 800174c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001750:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001752:	2301      	movs	r3, #1
 8001754:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001756:	f7ff fafb 	bl	8000d50 <HAL_GetTick>
 800175a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	019a      	lsls	r2, r3, #6
 8001760:	f53f aebc 	bmi.w	80014dc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff faf4 	bl	8000d50 <HAL_GetTick>
 8001768:	1b40      	subs	r0, r0, r5
 800176a:	2802      	cmp	r0, #2
 800176c:	d9f6      	bls.n	800175c <HAL_RCC_OscConfig+0x2b4>
 800176e:	e6e2      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff faee 	bl	8000d50 <HAL_GetTick>
 8001774:	1bc0      	subs	r0, r0, r7
 8001776:	2802      	cmp	r0, #2
 8001778:	d9d8      	bls.n	800172c <HAL_RCC_OscConfig+0x284>
 800177a:	e6dc      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
 800177c:	40023800 	.word	0x40023800
 8001780:	42470000 	.word	0x42470000
 8001784:	42470e80 	.word	0x42470e80
 8001788:	40007000 	.word	0x40007000
 800178c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001790:	f7ff fade 	bl	8000d50 <HAL_GetTick>
 8001794:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	682b      	ldr	r3, [r5, #0]
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	f57f ae9f 	bpl.w	80014dc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fad7 	bl	8000d50 <HAL_GetTick>
 80017a2:	1b00      	subs	r0, r0, r4
 80017a4:	2802      	cmp	r0, #2
 80017a6:	d9f6      	bls.n	8001796 <HAL_RCC_OscConfig+0x2ee>
 80017a8:	e6c5      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
 80017aa:	bf00      	nop

080017ac <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ac:	4913      	ldr	r1, [pc, #76]	; (80017fc <HAL_RCC_GetSysClockFreq+0x50>)
{
 80017ae:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b0:	688b      	ldr	r3, [r1, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x16>
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017be:	4810      	ldr	r0, [pc, #64]	; (8001800 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80017c0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80017c2:	4810      	ldr	r0, [pc, #64]	; (8001804 <HAL_RCC_GetSysClockFreq+0x58>)
 80017c4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ca:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017cc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	bf14      	ite	ne
 80017d2:	480c      	ldrne	r0, [pc, #48]	; (8001804 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d4:	480a      	ldreq	r0, [pc, #40]	; (8001800 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80017da:	bf18      	it	ne
 80017dc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	fba1 0100 	umull	r0, r1, r1, r0
 80017e6:	f7ff f8e1 	bl	80009ac <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCC_GetSysClockFreq+0x50>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80017f2:	3301      	adds	r3, #1
 80017f4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80017f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80017fa:	bd08      	pop	{r3, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	00f42400 	.word	0x00f42400
 8001804:	007a1200 	.word	0x007a1200

08001808 <HAL_RCC_ClockConfig>:
{
 8001808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800180c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800180e:	4604      	mov	r4, r0
 8001810:	b910      	cbnz	r0, 8001818 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001812:	2001      	movs	r0, #1
 8001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <HAL_RCC_ClockConfig+0x124>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	f002 020f 	and.w	r2, r2, #15
 8001820:	428a      	cmp	r2, r1
 8001822:	d328      	bcc.n	8001876 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	6821      	ldr	r1, [r4, #0]
 8001826:	078f      	lsls	r7, r1, #30
 8001828:	d42d      	bmi.n	8001886 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	07c8      	lsls	r0, r1, #31
 800182c:	d440      	bmi.n	80018b0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_ClockConfig+0x124>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f002 020f 	and.w	r2, r2, #15
 8001836:	4295      	cmp	r5, r2
 8001838:	d366      	bcc.n	8001908 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183a:	6822      	ldr	r2, [r4, #0]
 800183c:	0751      	lsls	r1, r2, #29
 800183e:	d46c      	bmi.n	800191a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	0713      	lsls	r3, r2, #28
 8001842:	d507      	bpl.n	8001854 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001844:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <HAL_RCC_ClockConfig+0x128>)
 8001846:	6921      	ldr	r1, [r4, #16]
 8001848:	6893      	ldr	r3, [r2, #8]
 800184a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800184e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001852:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001854:	f7ff ffaa 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_RCC_ClockConfig+0x128>)
 800185a:	4a36      	ldr	r2, [pc, #216]	; (8001934 <HAL_RCC_ClockConfig+0x12c>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	40d8      	lsrs	r0, r3
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <HAL_RCC_ClockConfig+0x130>)
 8001868:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fa26 	bl	8000cbc <HAL_InitTick>
  return HAL_OK;
 8001870:	2000      	movs	r0, #0
 8001872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	b2ca      	uxtb	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	4299      	cmp	r1, r3
 8001882:	d1c6      	bne.n	8001812 <HAL_RCC_ClockConfig+0xa>
 8001884:	e7ce      	b.n	8001824 <HAL_RCC_ClockConfig+0x1c>
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800188c:	bf1e      	ittt	ne
 800188e:	689a      	ldrne	r2, [r3, #8]
 8001890:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001894:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	bf42      	ittt	mi
 800189a:	689a      	ldrmi	r2, [r3, #8]
 800189c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80018a0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	68a0      	ldr	r0, [r4, #8]
 80018a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018aa:	4302      	orrs	r2, r0
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	e7bc      	b.n	800182a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b0:	6862      	ldr	r2, [r4, #4]
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_RCC_ClockConfig+0x128>)
 80018b4:	2a01      	cmp	r2, #1
 80018b6:	d11d      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	d0a8      	beq.n	8001812 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c0:	4e1b      	ldr	r6, [pc, #108]	; (8001930 <HAL_RCC_ClockConfig+0x128>)
 80018c2:	68b3      	ldr	r3, [r6, #8]
 80018c4:	f023 0303 	bic.w	r3, r3, #3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80018cc:	f7ff fa40 	bl	8000d50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80018d4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	68b3      	ldr	r3, [r6, #8]
 80018d8:	6862      	ldr	r2, [r4, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018e2:	d0a4      	beq.n	800182e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff fa34 	bl	8000d50 <HAL_GetTick>
 80018e8:	1bc0      	subs	r0, r0, r7
 80018ea:	4540      	cmp	r0, r8
 80018ec:	d9f3      	bls.n	80018d6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80018ee:	2003      	movs	r0, #3
}
 80018f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f4:	1e91      	subs	r1, r2, #2
 80018f6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	d802      	bhi.n	8001902 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001900:	e7dd      	b.n	80018be <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	f013 0f02 	tst.w	r3, #2
 8001906:	e7da      	b.n	80018be <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001908:	b2ea      	uxtb	r2, r5
 800190a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	429d      	cmp	r5, r3
 8001914:	f47f af7d 	bne.w	8001812 <HAL_RCC_ClockConfig+0xa>
 8001918:	e78f      	b.n	800183a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191a:	4905      	ldr	r1, [pc, #20]	; (8001930 <HAL_RCC_ClockConfig+0x128>)
 800191c:	68e0      	ldr	r0, [r4, #12]
 800191e:	688b      	ldr	r3, [r1, #8]
 8001920:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001924:	4303      	orrs	r3, r0
 8001926:	608b      	str	r3, [r1, #8]
 8001928:	e78a      	b.n	8001840 <HAL_RCC_ClockConfig+0x38>
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	0800272b 	.word	0x0800272b
 8001938:	20000008 	.word	0x20000008

0800193c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800193c:	4b01      	ldr	r3, [pc, #4]	; (8001944 <HAL_RCC_GetHCLKFreq+0x8>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <HAL_RCC_GetPCLK1Freq+0x14>)
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x18>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001956:	6810      	ldr	r0, [r2, #0]
}
 8001958:	40d8      	lsrs	r0, r3
 800195a:	4770      	bx	lr
 800195c:	40023800 	.word	0x40023800
 8001960:	0800273b 	.word	0x0800273b
 8001964:	20000008 	.word	0x20000008

08001968 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_GetPCLK2Freq+0x14>)
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x18>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	4a03      	ldr	r2, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001976:	6810      	ldr	r0, [r2, #0]
}
 8001978:	40d8      	lsrs	r0, r3
 800197a:	4770      	bx	lr
 800197c:	40023800 	.word	0x40023800
 8001980:	0800273b 	.word	0x0800273b
 8001984:	20000008 	.word	0x20000008

08001988 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001988:	6803      	ldr	r3, [r0, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800199a:	2000      	movs	r0, #0
 800199c:	4770      	bx	lr

0800199e <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800199e:	6803      	ldr	r3, [r0, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019a8:	6a19      	ldr	r1, [r3, #32]
 80019aa:	f241 1211 	movw	r2, #4369	; 0x1111
 80019ae:	4211      	tst	r1, r2
 80019b0:	d108      	bne.n	80019c4 <HAL_TIM_Base_Stop_IT+0x26>
 80019b2:	6a19      	ldr	r1, [r3, #32]
 80019b4:	f240 4244 	movw	r2, #1092	; 0x444
 80019b8:	4211      	tst	r1, r2
 80019ba:	bf02      	ittt	eq
 80019bc:	681a      	ldreq	r2, [r3, #0]
 80019be:	f022 0201 	biceq.w	r2, r2, #1
 80019c2:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 80019c4:	2000      	movs	r0, #0
 80019c6:	4770      	bx	lr

080019c8 <HAL_TIM_PeriodElapsedCallback>:
 80019c8:	4770      	bx	lr

080019ca <HAL_TIM_OC_DelayElapsedCallback>:
 80019ca:	4770      	bx	lr

080019cc <HAL_TIM_IC_CaptureCallback>:
 80019cc:	4770      	bx	lr

080019ce <HAL_TIM_PWM_PulseFinishedCallback>:
 80019ce:	4770      	bx	lr

080019d0 <HAL_TIM_TriggerCallback>:
 80019d0:	4770      	bx	lr

080019d2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019d2:	6803      	ldr	r3, [r0, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	0791      	lsls	r1, r2, #30
{
 80019d8:	b510      	push	{r4, lr}
 80019da:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019dc:	d50e      	bpl.n	80019fc <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	0792      	lsls	r2, r2, #30
 80019e2:	d50b      	bpl.n	80019fc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019e4:	f06f 0202 	mvn.w	r2, #2
 80019e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ec:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ee:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019f0:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019f2:	d077      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80019f4:	f7ff ffea 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f8:	2300      	movs	r3, #0
 80019fa:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	0750      	lsls	r0, r2, #29
 8001a02:	d510      	bpl.n	8001a26 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	0751      	lsls	r1, r2, #29
 8001a08:	d50d      	bpl.n	8001a26 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a0a:	f06f 0204 	mvn.w	r2, #4
 8001a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a10:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a12:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a14:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a18:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a1c:	d068      	beq.n	8001af0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1e:	f7ff ffd5 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a22:	2300      	movs	r3, #0
 8001a24:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	0712      	lsls	r2, r2, #28
 8001a2c:	d50f      	bpl.n	8001a4e <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	0710      	lsls	r0, r2, #28
 8001a32:	d50c      	bpl.n	8001a4e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a34:	f06f 0208 	mvn.w	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a3a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a3e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a40:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a44:	d05a      	beq.n	8001afc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a46:	f7ff ffc1 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	06d2      	lsls	r2, r2, #27
 8001a54:	d510      	bpl.n	8001a78 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	06d0      	lsls	r0, r2, #27
 8001a5a:	d50d      	bpl.n	8001a78 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a5c:	f06f 0210 	mvn.w	r2, #16
 8001a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a64:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a66:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a6a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a6e:	d04b      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a70:	f7ff ffac 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a74:	2300      	movs	r3, #0
 8001a76:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	07d1      	lsls	r1, r2, #31
 8001a7e:	d508      	bpl.n	8001a92 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	07d2      	lsls	r2, r2, #31
 8001a84:	d505      	bpl.n	8001a92 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a86:	f06f 0201 	mvn.w	r2, #1
 8001a8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff ff9b 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	0610      	lsls	r0, r2, #24
 8001a98:	d508      	bpl.n	8001aac <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	0611      	lsls	r1, r2, #24
 8001a9e:	d505      	bpl.n	8001aac <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001aa4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f000 f89d 	bl	8001be6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	0652      	lsls	r2, r2, #25
 8001ab2:	d508      	bpl.n	8001ac6 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	0650      	lsls	r0, r2, #25
 8001ab8:	d505      	bpl.n	8001ac6 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001abe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff ff85 	bl	80019d0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	0691      	lsls	r1, r2, #26
 8001acc:	d522      	bpl.n	8001b14 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	0692      	lsls	r2, r2, #26
 8001ad2:	d51f      	bpl.n	8001b14 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ad4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001ad8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ada:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001ae0:	f000 b880 	b.w	8001be4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae4:	f7ff ff71 	bl	80019ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff ff70 	bl	80019ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001aee:	e783      	b.n	80019f8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af0:	f7ff ff6b 	bl	80019ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7ff ff6a 	bl	80019ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001afa:	e792      	b.n	8001a22 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afc:	f7ff ff65 	bl	80019ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff ff64 	bl	80019ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001b06:	e7a0      	b.n	8001a4a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b08:	f7ff ff5f 	bl	80019ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff ff5e 	bl	80019ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001b12:	e7af      	b.n	8001a74 <HAL_TIM_IRQHandler+0xa2>
 8001b14:	bd10      	pop	{r4, pc}
	...

08001b18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8001b1a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b1c:	4290      	cmp	r0, r2
 8001b1e:	d00e      	beq.n	8001b3e <TIM_Base_SetConfig+0x26>
 8001b20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b24:	d00b      	beq.n	8001b3e <TIM_Base_SetConfig+0x26>
 8001b26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b2a:	4290      	cmp	r0, r2
 8001b2c:	d007      	beq.n	8001b3e <TIM_Base_SetConfig+0x26>
 8001b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b32:	4290      	cmp	r0, r2
 8001b34:	d003      	beq.n	8001b3e <TIM_Base_SetConfig+0x26>
 8001b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b3a:	4290      	cmp	r0, r2
 8001b3c:	d119      	bne.n	8001b72 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001b3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b44:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <TIM_Base_SetConfig+0x8c>)
 8001b48:	4290      	cmp	r0, r2
 8001b4a:	d104      	bne.n	8001b56 <TIM_Base_SetConfig+0x3e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b4c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b52:	4313      	orrs	r3, r2
 8001b54:	e018      	b.n	8001b88 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b56:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b5a:	d0f7      	beq.n	8001b4c <TIM_Base_SetConfig+0x34>
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <TIM_Base_SetConfig+0x90>)
 8001b5e:	4290      	cmp	r0, r2
 8001b60:	d0f4      	beq.n	8001b4c <TIM_Base_SetConfig+0x34>
 8001b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b66:	4290      	cmp	r0, r2
 8001b68:	d0f0      	beq.n	8001b4c <TIM_Base_SetConfig+0x34>
 8001b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b6e:	4290      	cmp	r0, r2
 8001b70:	d0ec      	beq.n	8001b4c <TIM_Base_SetConfig+0x34>
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <TIM_Base_SetConfig+0x94>)
 8001b74:	4290      	cmp	r0, r2
 8001b76:	d0e9      	beq.n	8001b4c <TIM_Base_SetConfig+0x34>
 8001b78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b7c:	4290      	cmp	r0, r2
 8001b7e:	d0e5      	beq.n	8001b4c <TIM_Base_SetConfig+0x34>
 8001b80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b84:	4290      	cmp	r0, r2
 8001b86:	d0e1      	beq.n	8001b4c <TIM_Base_SetConfig+0x34>
  }

  TIMx->CR1 = tmpcr1;
 8001b88:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b8a:	688b      	ldr	r3, [r1, #8]
 8001b8c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b8e:	680b      	ldr	r3, [r1, #0]
 8001b90:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <TIM_Base_SetConfig+0x8c>)
 8001b94:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b96:	bf04      	itt	eq
 8001b98:	690b      	ldreq	r3, [r1, #16]
 8001b9a:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6143      	str	r3, [r0, #20]
}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40014000 	.word	0x40014000

08001bb0 <HAL_TIM_Base_Init>:
{ 
 8001bb0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	b1a0      	cbz	r0, 8001be0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001bba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bbe:	b91b      	cbnz	r3, 8001bc8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bc0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001bc4:	f000 fca6 	bl	8002514 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001bce:	6820      	ldr	r0, [r4, #0]
 8001bd0:	1d21      	adds	r1, r4, #4
 8001bd2:	f7ff ffa1 	bl	8001b18 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001be0:	2001      	movs	r0, #1
}
 8001be2:	bd10      	pop	{r4, pc}

08001be4 <HAL_TIMEx_CommutationCallback>:
 8001be4:	4770      	bx	lr

08001be6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001be6:	4770      	bx	lr

08001be8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001bec:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001bee:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001bf0:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bf2:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001bf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001bf8:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001bfa:	6133      	str	r3, [r6, #16]
{
 8001bfc:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bfe:	6883      	ldr	r3, [r0, #8]
 8001c00:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001c02:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c04:	4303      	orrs	r3, r0
 8001c06:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c08:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c0c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001c0e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c12:	430b      	orrs	r3, r1
 8001c14:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001c16:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001c18:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001c1a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001c20:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c22:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001c26:	6173      	str	r3, [r6, #20]
 8001c28:	4b7a      	ldr	r3, [pc, #488]	; (8001e14 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c2a:	d17c      	bne.n	8001d26 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c2c:	429e      	cmp	r6, r3
 8001c2e:	d003      	beq.n	8001c38 <UART_SetConfig+0x50>
 8001c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c34:	429e      	cmp	r6, r3
 8001c36:	d144      	bne.n	8001cc2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c38:	f7ff fe96 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001c3c:	2519      	movs	r5, #25
 8001c3e:	fb05 f300 	mul.w	r3, r5, r0
 8001c42:	6860      	ldr	r0, [r4, #4]
 8001c44:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c48:	0040      	lsls	r0, r0, #1
 8001c4a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c56:	f7ff fe87 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	4368      	muls	r0, r5
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fbb0 f7f3 	udiv	r7, r0, r3
 8001c64:	f7ff fe80 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001c68:	6863      	ldr	r3, [r4, #4]
 8001c6a:	4368      	muls	r0, r5
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c76:	fb09 7313 	mls	r3, r9, r3, r7
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	3332      	adds	r3, #50	; 0x32
 8001c7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001c88:	f7ff fe6e 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001c8c:	6862      	ldr	r2, [r4, #4]
 8001c8e:	4368      	muls	r0, r5
 8001c90:	0052      	lsls	r2, r2, #1
 8001c92:	fbb0 faf2 	udiv	sl, r0, r2
 8001c96:	f7ff fe67 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	4368      	muls	r0, r5
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ca8:	fb09 a313 	mls	r3, r9, r3, sl
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	3332      	adds	r3, #50	; 0x32
 8001cb0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001cba:	443b      	add	r3, r7
 8001cbc:	60b3      	str	r3, [r6, #8]
 8001cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001cc2:	f7ff fe41 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001cc6:	2519      	movs	r5, #25
 8001cc8:	fb05 f300 	mul.w	r3, r5, r0
 8001ccc:	6860      	ldr	r0, [r4, #4]
 8001cce:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001cd2:	0040      	lsls	r0, r0, #1
 8001cd4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001cd8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ce0:	f7ff fe32 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	4368      	muls	r0, r5
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fbb0 f7f3 	udiv	r7, r0, r3
 8001cee:	f7ff fe2b 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	4368      	muls	r0, r5
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d00:	fb09 7313 	mls	r3, r9, r3, r7
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	3332      	adds	r3, #50	; 0x32
 8001d08:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001d12:	f7ff fe19 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001d16:	6862      	ldr	r2, [r4, #4]
 8001d18:	4368      	muls	r0, r5
 8001d1a:	0052      	lsls	r2, r2, #1
 8001d1c:	fbb0 faf2 	udiv	sl, r0, r2
 8001d20:	f7ff fe12 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001d24:	e7b9      	b.n	8001c9a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d26:	429e      	cmp	r6, r3
 8001d28:	d002      	beq.n	8001d30 <UART_SetConfig+0x148>
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <UART_SetConfig+0x230>)
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d140      	bne.n	8001db2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d30:	f7ff fe1a 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001d34:	6867      	ldr	r7, [r4, #4]
 8001d36:	2519      	movs	r5, #25
 8001d38:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d3c:	fb05 f300 	mul.w	r3, r5, r0
 8001d40:	00bf      	lsls	r7, r7, #2
 8001d42:	fbb3 f3f7 	udiv	r3, r3, r7
 8001d46:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d4a:	011f      	lsls	r7, r3, #4
 8001d4c:	f7ff fe0c 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001d50:	6863      	ldr	r3, [r4, #4]
 8001d52:	4368      	muls	r0, r5
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fbb0 f8f3 	udiv	r8, r0, r3
 8001d5a:	f7ff fe05 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001d5e:	6863      	ldr	r3, [r4, #4]
 8001d60:	4368      	muls	r0, r5
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d68:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d6c:	fb09 8313 	mls	r3, r9, r3, r8
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	3332      	adds	r3, #50	; 0x32
 8001d74:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d78:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001d7c:	f7ff fdf4 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001d80:	6862      	ldr	r2, [r4, #4]
 8001d82:	4368      	muls	r0, r5
 8001d84:	0092      	lsls	r2, r2, #2
 8001d86:	fbb0 faf2 	udiv	sl, r0, r2
 8001d8a:	f7ff fded 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d8e:	6863      	ldr	r3, [r4, #4]
 8001d90:	4368      	muls	r0, r5
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d98:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d9c:	fb09 a313 	mls	r3, r9, r3, sl
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	3332      	adds	r3, #50	; 0x32
 8001da4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	ea43 0308 	orr.w	r3, r3, r8
 8001db0:	e783      	b.n	8001cba <UART_SetConfig+0xd2>
 8001db2:	f7ff fdc9 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001db6:	6867      	ldr	r7, [r4, #4]
 8001db8:	2519      	movs	r5, #25
 8001dba:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001dbe:	fb05 f300 	mul.w	r3, r5, r0
 8001dc2:	00bf      	lsls	r7, r7, #2
 8001dc4:	fbb3 f3f7 	udiv	r3, r3, r7
 8001dc8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dcc:	011f      	lsls	r7, r3, #4
 8001dce:	f7ff fdbb 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001dd2:	6863      	ldr	r3, [r4, #4]
 8001dd4:	4368      	muls	r0, r5
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fbb0 f8f3 	udiv	r8, r0, r3
 8001ddc:	f7ff fdb4 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001de0:	6863      	ldr	r3, [r4, #4]
 8001de2:	4368      	muls	r0, r5
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dee:	fb09 8313 	mls	r3, r9, r3, r8
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	3332      	adds	r3, #50	; 0x32
 8001df6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dfa:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001dfe:	f7ff fda3 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001e02:	6862      	ldr	r2, [r4, #4]
 8001e04:	4368      	muls	r0, r5
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	fbb0 faf2 	udiv	sl, r0, r2
 8001e0c:	f7ff fd9c 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8001e10:	e7bd      	b.n	8001d8e <UART_SetConfig+0x1a6>
 8001e12:	bf00      	nop
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40011400 	.word	0x40011400

08001e1c <HAL_UART_Init>:
{
 8001e1c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e1e:	4604      	mov	r4, r0
 8001e20:	b340      	cbz	r0, 8001e74 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e2a:	b91b      	cbnz	r3, 8001e34 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e30:	f000 fba6 	bl	8002580 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e34:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e36:	2324      	movs	r3, #36	; 0x24
 8001e38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e3c:	68d3      	ldr	r3, [r2, #12]
 8001e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e42:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fecf 	bl	8001be8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e5a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e62:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e64:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e66:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e68:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e6e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e74:	2001      	movs	r0, #1
}
 8001e76:	bd10      	pop	{r4, pc}

08001e78 <TextLCD_Strobe>:
void TextLCD_Data(TextLCDType *lcd, uint8_t data);



void TextLCD_Strobe(TextLCDType *lcd) // Enables the E-pin to write things
{
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	4604      	mov	r4, r0
	delay_us(40);
 8001e7c:	2028      	movs	r0, #40	; 0x28
 8001e7e:	f000 f8d3 	bl	8002028 <delay_us>
	HAL_GPIO_WritePin(lcd->controlPort, lcd->strbPin, 1);
 8001e82:	89e1      	ldrh	r1, [r4, #14]
 8001e84:	6860      	ldr	r0, [r4, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f7ff fb08 	bl	800149c <HAL_GPIO_WritePin>
	delay_us(40);
 8001e8c:	2028      	movs	r0, #40	; 0x28
 8001e8e:	f000 f8cb 	bl	8002028 <delay_us>
	HAL_GPIO_WritePin(lcd->controlPort, lcd->strbPin, 0);
 8001e92:	6860      	ldr	r0, [r4, #4]
 8001e94:	89e1      	ldrh	r1, [r4, #14]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f7ff fb00 	bl	800149c <HAL_GPIO_WritePin>
	delay_us(40);
 8001e9c:	2028      	movs	r0, #40	; 0x28
}
 8001e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(40);
 8001ea2:	f000 b8c1 	b.w	8002028 <delay_us>

08001ea6 <TextLCD_Cmd>:
void TextLCD_Cmd(TextLCDType *lcd, uint8_t cmd) // Runs your command(bit-pattern)
{
 8001ea6:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rsPin | lcd->rwPin, 0);
 8001ea8:	8a03      	ldrh	r3, [r0, #16]
{
 8001eaa:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rsPin | lcd->rwPin, 0);
 8001eac:	8981      	ldrh	r1, [r0, #12]
{
 8001eae:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rsPin | lcd->rwPin, 0);
 8001eb0:	4319      	orrs	r1, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	6840      	ldr	r0, [r0, #4]
 8001eb6:	b289      	uxth	r1, r1
 8001eb8:	f7ff faf0 	bl	800149c <HAL_GPIO_WritePin>
	lcd->dataPort->ODR &=~ 0xff;
 8001ebc:	68a3      	ldr	r3, [r4, #8]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ec4:	615a      	str	r2, [r3, #20]
	lcd->dataPort->ODR |= cmd;
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	4315      	orrs	r5, r2
 8001eca:	615d      	str	r5, [r3, #20]

	TextLCD_Strobe(lcd);
 8001ecc:	4620      	mov	r0, r4
}
 8001ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TextLCD_Strobe(lcd);
 8001ed2:	f7ff bfd1 	b.w	8001e78 <TextLCD_Strobe>

08001ed6 <TextLCD_Data>:
void TextLCD_Data(TextLCDType *lcd, uint8_t data) // Sends a bit-pattern on the databus.
{
 8001ed6:	b538      	push	{r3, r4, r5, lr}
 8001ed8:	4604      	mov	r4, r0
 8001eda:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rsPin, 1);
 8001edc:	2201      	movs	r2, #1
 8001ede:	8981      	ldrh	r1, [r0, #12]
 8001ee0:	6840      	ldr	r0, [r0, #4]
 8001ee2:	f7ff fadb 	bl	800149c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->controlPort, lcd->rwPin, 0);
 8001ee6:	6860      	ldr	r0, [r4, #4]
 8001ee8:	8a21      	ldrh	r1, [r4, #16]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f7ff fad6 	bl	800149c <HAL_GPIO_WritePin>
	lcd->dataPort->ODR &= ~0xff;
 8001ef0:	68a3      	ldr	r3, [r4, #8]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ef8:	615a      	str	r2, [r3, #20]
	lcd->dataPort->ODR |= data;
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	4315      	orrs	r5, r2
 8001efe:	615d      	str	r5, [r3, #20]

	TextLCD_Strobe(lcd);
 8001f00:	4620      	mov	r0, r4
}
 8001f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TextLCD_Strobe(lcd);
 8001f06:	f7ff bfb7 	b.w	8001e78 <TextLCD_Strobe>

08001f0a <TextLCD_Init>:

void TextLCD_Init(TextLCDType *lcd, GPIO_TypeDef *controlPort, uint16_t rsPin, uint16_t rwPin, uint16_t enPin, GPIO_TypeDef *dataPort, uint16_t dataPins)
{
 8001f0a:	b538      	push	{r3, r4, r5, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001f12:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	lcd->controlPort = controlPort;
	lcd->rsPin = rsPin;
	lcd->rwPin = rwPin;
 8001f16:	8223      	strh	r3, [r4, #16]
	lcd->strbPin = enPin;
	lcd->dataPort = dataPort;
 8001f18:	9b05      	ldr	r3, [sp, #20]
	lcd->rsPin = rsPin;
 8001f1a:	81a2      	strh	r2, [r4, #12]
	lcd->dataPort = dataPort;
 8001f1c:	60a3      	str	r3, [r4, #8]
	lcd->controlPort = controlPort;
 8001f1e:	6061      	str	r1, [r4, #4]
	lcd->dataPins = dataPins;
 8001f20:	8260      	strh	r0, [r4, #18]
	lcd->strbPin = enPin;
 8001f22:	81e5      	strh	r5, [r4, #14]

	HAL_Delay(20);
 8001f24:	2014      	movs	r0, #20
 8001f26:	f7fe ff19 	bl	8000d5c <HAL_Delay>
	TextLCD_Cmd(lcd, 0x38);
 8001f2a:	2138      	movs	r1, #56	; 0x38
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff ffba 	bl	8001ea6 <TextLCD_Cmd>
	HAL_Delay(6);
 8001f32:	2006      	movs	r0, #6
 8001f34:	f7fe ff12 	bl	8000d5c <HAL_Delay>
	TextLCD_Cmd(lcd, 0x38);
 8001f38:	2138      	movs	r1, #56	; 0x38
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff ffb3 	bl	8001ea6 <TextLCD_Cmd>
	delay_us(100);
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	f000 f871 	bl	8002028 <delay_us>
	TextLCD_Cmd(lcd, 0x38);
 8001f46:	2138      	movs	r1, #56	; 0x38
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff ffac 	bl	8001ea6 <TextLCD_Cmd>
	delay_us(40);
 8001f4e:	2028      	movs	r0, #40	; 0x28
 8001f50:	f000 f86a 	bl	8002028 <delay_us>
	TextLCD_Cmd(lcd, 0x38);
 8001f54:	2138      	movs	r1, #56	; 0x38
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff ffa5 	bl	8001ea6 <TextLCD_Cmd>
	delay_us(40);
 8001f5c:	2028      	movs	r0, #40	; 0x28
 8001f5e:	f000 f863 	bl	8002028 <delay_us>
	TextLCD_Cmd(lcd, 0x06);
 8001f62:	2106      	movs	r1, #6
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff ff9e 	bl	8001ea6 <TextLCD_Cmd>
	delay_us(40);
 8001f6a:	2028      	movs	r0, #40	; 0x28
 8001f6c:	f000 f85c 	bl	8002028 <delay_us>
	TextLCD_Cmd(lcd, 0x0E);
 8001f70:	210e      	movs	r1, #14
 8001f72:	4620      	mov	r0, r4
 8001f74:	f7ff ff97 	bl	8001ea6 <TextLCD_Cmd>
	delay_us(40);
 8001f78:	2028      	movs	r0, #40	; 0x28
 8001f7a:	f000 f855 	bl	8002028 <delay_us>
	TextLCD_Cmd(lcd, 0x01);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff ff90 	bl	8001ea6 <TextLCD_Cmd>
	HAL_Delay(3);
 8001f86:	2003      	movs	r0, #3
 8001f88:	f7fe fee8 	bl	8000d5c <HAL_Delay>
	TextLCD_Cmd(lcd, 0x80);
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	2180      	movs	r1, #128	; 0x80
}
 8001f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TextLCD_Cmd(lcd, 0x80);
 8001f94:	f7ff bf87 	b.w	8001ea6 <TextLCD_Cmd>

08001f98 <TextLCD_Clear>:
{
	TextLCD_Cmd(lcd, 0x02);
	HAL_Delay(2);
}
void TextLCD_Clear (TextLCDType *lcd) // clears display
{
 8001f98:	b508      	push	{r3, lr}
	TextLCD_Cmd(lcd, 0x01);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	f7ff ff83 	bl	8001ea6 <TextLCD_Cmd>
	HAL_Delay(2);
 8001fa0:	2002      	movs	r0, #2
}
 8001fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(2);
 8001fa6:	f7fe bed9 	b.w	8000d5c <HAL_Delay>

08001faa <TextLCD_Position>:
void TextLCD_Position (TextLCDType *lcd, int x, int y)
{
 8001faa:	b508      	push	{r3, lr}
	TextLCD_Cmd(lcd, 0x01 * x | 0x80 | 0x40 * y);
 8001fac:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
 8001fb0:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8001fb4:	b2c9      	uxtb	r1, r1
 8001fb6:	f7ff ff76 	bl	8001ea6 <TextLCD_Cmd>
	delay_us(40);
 8001fba:	2028      	movs	r0, #40	; 0x28
}
 8001fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_us(40);
 8001fc0:	f000 b832 	b.w	8002028 <delay_us>

08001fc4 <TextLCD_Putchar>:
void TextLCD_Putchar (TextLCDType *lcd, uint8_t data)
{
 8001fc4:	b508      	push	{r3, lr}
	TextLCD_Data(lcd, data);
 8001fc6:	f7ff ff86 	bl	8001ed6 <TextLCD_Data>
	delay_us(40);
 8001fca:	2028      	movs	r0, #40	; 0x28
}
 8001fcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_us(40);
 8001fd0:	f000 b82a 	b.w	8002028 <delay_us>

08001fd4 <TextLCD_PutInt>:
void TextLCD_PutInt (TextLCDType *lcd, uint32_t data){
	if(data < 0){
		TextLCD_Putchar(lcd, '-');
		data = data * -1;
	}
	if(data > 9)
 8001fd4:	2909      	cmp	r1, #9
void TextLCD_PutInt (TextLCDType *lcd, uint32_t data){
 8001fd6:	b538      	push	{r3, r4, r5, lr}
 8001fd8:	4605      	mov	r5, r0
 8001fda:	460c      	mov	r4, r1
	if(data > 9)
 8001fdc:	d904      	bls.n	8001fe8 <TextLCD_PutInt+0x14>
		TextLCD_PutInt(lcd, data/10);
 8001fde:	210a      	movs	r1, #10
 8001fe0:	fbb4 f1f1 	udiv	r1, r4, r1
 8001fe4:	f7ff fff6 	bl	8001fd4 <TextLCD_PutInt>

	TextLCD_Putchar(lcd, data % 10 + 0x30);
 8001fe8:	230a      	movs	r3, #10
 8001fea:	fbb4 f1f3 	udiv	r1, r4, r3
 8001fee:	fb03 4111 	mls	r1, r3, r1, r4
 8001ff2:	3130      	adds	r1, #48	; 0x30
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	b2c9      	uxtb	r1, r1
}
 8001ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TextLCD_Putchar(lcd, data % 10 + 0x30);
 8001ffc:	f7ff bfe2 	b.w	8001fc4 <TextLCD_Putchar>

08002000 <TextLCD_Puts>:
void TextLCD_Puts (TextLCDType *lcd, char *string)
{
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	4606      	mov	r6, r0
 8002004:	1e4d      	subs	r5, r1, #1
		TextLCD_Putchar(lcd, *string);
		string++;
		counter++;
		if(counter > 15){
			TextLCD_Position(lcd, 0, 1);
			counter = 0;
 8002006:	2400      	movs	r4, #0
	while(*string != '\0'){
 8002008:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800200c:	b901      	cbnz	r1, 8002010 <TextLCD_Puts+0x10>
		}
	}
}
 800200e:	bd70      	pop	{r4, r5, r6, pc}
		TextLCD_Putchar(lcd, *string);
 8002010:	4630      	mov	r0, r6
		counter++;
 8002012:	3401      	adds	r4, #1
		TextLCD_Putchar(lcd, *string);
 8002014:	f7ff ffd6 	bl	8001fc4 <TextLCD_Putchar>
		if(counter > 15){
 8002018:	2c0f      	cmp	r4, #15
 800201a:	d9f5      	bls.n	8002008 <TextLCD_Puts+0x8>
			TextLCD_Position(lcd, 0, 1);
 800201c:	2201      	movs	r2, #1
 800201e:	2100      	movs	r1, #0
 8002020:	4630      	mov	r0, r6
 8002022:	f7ff ffc2 	bl	8001faa <TextLCD_Position>
 8002026:	e7ee      	b.n	8002006 <TextLCD_Puts+0x6>

08002028 <delay_us>:
#include "delay.h"

volatile uint32_t usTick = 0;

void delay_us(uint32_t delay)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
	HAL_TIM_Base_Start_IT(&htim11);
 800202c:	4807      	ldr	r0, [pc, #28]	; (800204c <delay_us+0x24>)
 800202e:	f7ff fcab 	bl	8001988 <HAL_TIM_Base_Start_IT>
	uint32_t current = usTick;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <delay_us+0x28>)
 8002034:	6819      	ldr	r1, [r3, #0]
	while((usTick - current) < (delay - 2));
 8002036:	3c02      	subs	r4, #2
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	1a52      	subs	r2, r2, r1
 800203c:	42a2      	cmp	r2, r4
 800203e:	d3fb      	bcc.n	8002038 <delay_us+0x10>
	HAL_TIM_Base_Stop_IT(&htim11);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <delay_us+0x24>)
}
 8002042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop_IT(&htim11);
 8002046:	f7ff bcaa 	b.w	800199e <HAL_TIM_Base_Stop_IT>
 800204a:	bf00      	nop
 800204c:	2000004c 	.word	0x2000004c
 8002050:	20000028 	.word	0x20000028

08002054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002054:	b530      	push	{r4, r5, lr}
 8002056:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	2200      	movs	r2, #0
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <SystemClock_Config+0xa4>)
 800205c:	9201      	str	r2, [sp, #4]
 800205e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002060:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002064:	6419      	str	r1, [r3, #64]	; 0x40
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002068:	4924      	ldr	r1, [pc, #144]	; (80020fc <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002072:	9202      	str	r2, [sp, #8]
 8002074:	680b      	ldr	r3, [r1, #0]
 8002076:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800207a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002082:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800208c:	2301      	movs	r3, #1
 800208e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002090:	2310      	movs	r3, #16
 8002092:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002094:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002096:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800209a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800209c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800209e:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020a0:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a4:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a6:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020a8:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020aa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ac:	f7ff f9fc 	bl	80014a8 <HAL_RCC_OscConfig>
 80020b0:	b100      	cbz	r0, 80020b4 <SystemClock_Config+0x60>
 80020b2:	e7fe      	b.n	80020b2 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b4:	230f      	movs	r3, #15
 80020b6:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020be:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c0:	4621      	mov	r1, r4
 80020c2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c8:	f7ff fb9e 	bl	8001808 <HAL_RCC_ClockConfig>
 80020cc:	4604      	mov	r4, r0
 80020ce:	b100      	cbz	r0, 80020d2 <SystemClock_Config+0x7e>
 80020d0:	e7fe      	b.n	80020d0 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80020d2:	f7ff fc33 	bl	800193c <HAL_RCC_GetHCLKFreq>
 80020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020da:	fbb0 f0f3 	udiv	r0, r0, r3
 80020de:	f7ff f8df 	bl	80012a0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020e2:	4628      	mov	r0, r5
 80020e4:	f7ff f8f2 	bl	80012cc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020e8:	4622      	mov	r2, r4
 80020ea:	4621      	mov	r1, r4
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff f896 	bl	8001220 <HAL_NVIC_SetPriority>
}
 80020f4:	b015      	add	sp, #84	; 0x54
 80020f6:	bd30      	pop	{r4, r5, pc}
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle){

	if(__HAL_ADC_GET_FLAG(AdcHandle, ADC_FLAG_EOC)){
 8002100:	6803      	ldr	r3, [r0, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	079b      	lsls	r3, r3, #30
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle){
 8002106:	b510      	push	{r4, lr}
	if(__HAL_ADC_GET_FLAG(AdcHandle, ADC_FLAG_EOC)){
 8002108:	d50a      	bpl.n	8002120 <HAL_ADC_ConvCpltCallback+0x20>
		if(i == 0){
 800210a:	4c0e      	ldr	r4, [pc, #56]	; (8002144 <HAL_ADC_ConvCpltCallback+0x44>)
 800210c:	7823      	ldrb	r3, [r4, #0]
 800210e:	b943      	cbnz	r3, 8002122 <HAL_ADC_ConvCpltCallback+0x22>
			vRef = HAL_ADC_GetValue(&hadc1);
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <HAL_ADC_ConvCpltCallback+0x48>)
 8002112:	f7fe ff41 	bl	8000f98 <HAL_ADC_GetValue>
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_ADC_ConvCpltCallback+0x4c>)
			i++;
		}
		else if(i == 1){
			cpuV = HAL_ADC_GetValue(&hadc1);
 8002118:	6018      	str	r0, [r3, #0]
			i++;
 800211a:	7823      	ldrb	r3, [r4, #0]
 800211c:	3301      	adds	r3, #1
		}
		else if(i == 2){
			termV = HAL_ADC_GetValue(&hadc1);
			i = 0;
 800211e:	7023      	strb	r3, [r4, #0]
 8002120:	bd10      	pop	{r4, pc}
		else if(i == 1){
 8002122:	2b01      	cmp	r3, #1
 8002124:	d104      	bne.n	8002130 <HAL_ADC_ConvCpltCallback+0x30>
			cpuV = HAL_ADC_GetValue(&hadc1);
 8002126:	4808      	ldr	r0, [pc, #32]	; (8002148 <HAL_ADC_ConvCpltCallback+0x48>)
 8002128:	f7fe ff36 	bl	8000f98 <HAL_ADC_GetValue>
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_ADC_ConvCpltCallback+0x50>)
 800212e:	e7f3      	b.n	8002118 <HAL_ADC_ConvCpltCallback+0x18>
		else if(i == 2){
 8002130:	2b02      	cmp	r3, #2
 8002132:	d1f5      	bne.n	8002120 <HAL_ADC_ConvCpltCallback+0x20>
			termV = HAL_ADC_GetValue(&hadc1);
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <HAL_ADC_ConvCpltCallback+0x48>)
 8002136:	f7fe ff2f 	bl	8000f98 <HAL_ADC_GetValue>
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_ADC_ConvCpltCallback+0x54>)
 800213c:	6018      	str	r0, [r3, #0]
			i = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	e7ed      	b.n	800211e <HAL_ADC_ConvCpltCallback+0x1e>
 8002142:	bf00      	nop
 8002144:	20000034 	.word	0x20000034
 8002148:	200000d8 	.word	0x200000d8
 800214c:	20000044 	.word	0x20000044
 8002150:	20000030 	.word	0x20000030
 8002154:	20000040 	.word	0x20000040

08002158 <calcTemps>:
		numArr[i] = (0x030+(num % 10));
	for(int x = n-1; x >= 0; x--)
		TextLCD_Putchar(&lcd, numArr[x]);

}
void calcTemps(){
 8002158:	b508      	push	{r3, lr}
	  cpuTemp = (uint32_t) (80/(*TS_CAL110_ADDR - *TS_CAL30_ADDR) * (cpuV - *TS_CAL30_ADDR) + 30);
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <calcTemps+0x58>)
 800215c:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <calcTemps+0x5c>)
 800215e:	8818      	ldrh	r0, [r3, #0]
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <calcTemps+0x60>)
 8002162:	8812      	ldrh	r2, [r2, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1a1b      	subs	r3, r3, r0
 8002168:	1a11      	subs	r1, r2, r0
 800216a:	2250      	movs	r2, #80	; 0x50
 800216c:	fb92 f2f1 	sdiv	r2, r2, r1
 8002170:	4353      	muls	r3, r2
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <calcTemps+0x64>)
 8002174:	331e      	adds	r3, #30
 8002176:	6013      	str	r3, [r2, #0]
	  outTemp = (uint32_t) (termV * 0.02882882883 - 64.18918919);
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <calcTemps+0x68>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	f7fe f96e 	bl	800045c <__aeabi_ui2d>
 8002180:	a307      	add	r3, pc, #28	; (adr r3, 80021a0 <calcTemps+0x48>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe f9df 	bl	8000548 <__aeabi_dmul>
 800218a:	a307      	add	r3, pc, #28	; (adr r3, 80021a8 <calcTemps+0x50>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f826 	bl	80001e0 <__aeabi_dsub>
 8002194:	f7fe fbea 	bl	800096c <__aeabi_d2uiz>
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <calcTemps+0x6c>)
 800219a:	6018      	str	r0, [r3, #0]
 800219c:	bd08      	pop	{r3, pc}
 800219e:	bf00      	nop
 80021a0:	f406fef4 	.word	0xf406fef4
 80021a4:	3f9d854d 	.word	0x3f9d854d
 80021a8:	acf9f3a1 	.word	0xacf9f3a1
 80021ac:	40500c1b 	.word	0x40500c1b
 80021b0:	1fff7a2c 	.word	0x1fff7a2c
 80021b4:	1fff7a2e 	.word	0x1fff7a2e
 80021b8:	20000030 	.word	0x20000030
 80021bc:	2000002c 	.word	0x2000002c
 80021c0:	20000040 	.word	0x20000040
 80021c4:	20000038 	.word	0x20000038

080021c8 <main>:
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021cc:	2400      	movs	r4, #0
  HAL_Init();
 80021ce:	f7fe fd99 	bl	8000d04 <HAL_Init>
  SystemClock_Config();
 80021d2:	f7ff ff3f 	bl	8002054 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	4b8d      	ldr	r3, [pc, #564]	; (800240c <main+0x244>)
 80021d8:	9405      	str	r4, [sp, #20]
 80021da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 80021dc:	4f8c      	ldr	r7, [pc, #560]	; (8002410 <main+0x248>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021de:	f042 0204 	orr.w	r2, r2, #4
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
 80021e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e6:	f002 0204 	and.w	r2, r2, #4
 80021ea:	9205      	str	r2, [sp, #20]
 80021ec:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ee:	9406      	str	r4, [sp, #24]
 80021f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
 80021f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80021fe:	9206      	str	r2, [sp, #24]
 8002200:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	9407      	str	r4, [sp, #28]
 8002204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
 800220c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220e:	f002 0201 	and.w	r2, r2, #1
 8002212:	9207      	str	r2, [sp, #28]
 8002214:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	9408      	str	r4, [sp, #32]
 8002218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221a:	f042 0202 	orr.w	r2, r2, #2
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002228:	4622      	mov	r2, r4
 800222a:	21ff      	movs	r1, #255	; 0xff
 800222c:	4638      	mov	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002230:	f7ff f934 	bl	800149c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002234:	4622      	mov	r2, r4
 8002236:	2120      	movs	r1, #32
 8002238:	4876      	ldr	r0, [pc, #472]	; (8002414 <main+0x24c>)
 800223a:	f7ff f92f 	bl	800149c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 800223e:	4622      	mov	r2, r4
 8002240:	2107      	movs	r1, #7
 8002242:	4875      	ldr	r0, [pc, #468]	; (8002418 <main+0x250>)
 8002244:	f7ff f92a 	bl	800149c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800224e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002250:	4b72      	ldr	r3, [pc, #456]	; (800241c <main+0x254>)
 8002252:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002254:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 800225a:	f04f 08ff 	mov.w	r8, #255	; 0xff
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800225e:	f7ff f847 	bl	80012f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	a909      	add	r1, sp, #36	; 0x24
 8002264:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8002266:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	f7ff f83e 	bl	80012f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002274:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002276:	a909      	add	r1, sp, #36	; 0x24
 8002278:	4866      	ldr	r0, [pc, #408]	; (8002414 <main+0x24c>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800227a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
 8002282:	2607      	movs	r6, #7
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002284:	f7ff f834 	bl	80012f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	4863      	ldr	r0, [pc, #396]	; (8002418 <main+0x250>)
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
 800228a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f7ff f82c 	bl	80012f0 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002298:	4861      	ldr	r0, [pc, #388]	; (8002420 <main+0x258>)
  huart2.Init.BaudRate = 115200;
 800229a:	4b62      	ldr	r3, [pc, #392]	; (8002424 <main+0x25c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800229e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80022a2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a6:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022aa:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ac:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b2:	f7ff fdb3 	bl	8001e1c <HAL_UART_Init>
 80022b6:	b100      	cbz	r0, 80022ba <main+0xf2>
 80022b8:	e7fe      	b.n	80022b8 <main+0xf0>
  hadc1.Instance = ADC1;
 80022ba:	4c5b      	ldr	r4, [pc, #364]	; (8002428 <main+0x260>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022bc:	495b      	ldr	r1, [pc, #364]	; (800242c <main+0x264>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022be:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c4:	e884 000a 	stmia.w	r4, {r1, r3}
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022c8:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ca:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022cc:	4b58      	ldr	r3, [pc, #352]	; (8002430 <main+0x268>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ce:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 3;
 80022d0:	f04f 0a03 	mov.w	sl, #3
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022d4:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022d6:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 80022d8:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022da:	61a5      	str	r5, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022dc:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 3;
 80022de:	f8c4 a01c 	str.w	sl, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e2:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e4:	f7fe fd4e 	bl	8000d84 <HAL_ADC_Init>
 80022e8:	b100      	cbz	r0, 80022ec <main+0x124>
 80022ea:	e7fe      	b.n	80022ea <main+0x122>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80022ec:	2311      	movs	r3, #17
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ee:	a909      	add	r1, sp, #36	; 0x24
 80022f0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80022f2:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Rank = 1;
 80022f4:	950a      	str	r5, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022f6:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	f7fe fee8 	bl	80010cc <HAL_ADC_ConfigChannel>
 80022fc:	b100      	cbz	r0, 8002300 <main+0x138>
 80022fe:	e7fe      	b.n	80022fe <main+0x136>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002300:	2310      	movs	r3, #16
  sConfig.Rank = 2;
 8002302:	f04f 0902 	mov.w	r9, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002306:	a909      	add	r1, sp, #36	; 0x24
 8002308:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800230a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Rank = 2;
 800230c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002310:	f7fe fedc 	bl	80010cc <HAL_ADC_ConfigChannel>
 8002314:	b100      	cbz	r0, 8002318 <main+0x150>
 8002316:	e7fe      	b.n	8002316 <main+0x14e>
  sConfig.Channel = ADC_CHANNEL_0;
 8002318:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800231a:	a909      	add	r1, sp, #36	; 0x24
 800231c:	4620      	mov	r0, r4
  sConfig.Rank = 3;
 800231e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	f7fe fed3 	bl	80010cc <HAL_ADC_ConfigChannel>
 8002326:	b100      	cbz	r0, 800232a <main+0x162>
 8002328:	e7fe      	b.n	8002328 <main+0x160>
  htim10.Instance = TIM10;
 800232a:	4e42      	ldr	r6, [pc, #264]	; (8002434 <main+0x26c>)
  htim10.Init.Prescaler = 1343;
 800232c:	4a42      	ldr	r2, [pc, #264]	; (8002438 <main+0x270>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232e:	60b0      	str	r0, [r6, #8]
  htim10.Init.Prescaler = 1343;
 8002330:	f240 533f 	movw	r3, #1343	; 0x53f
 8002334:	e886 000c 	stmia.w	r6, {r2, r3}
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	6130      	str	r0, [r6, #16]
  htim10.Init.Period = 62499;
 800233a:	f24f 4323 	movw	r3, #62499	; 0xf423
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800233e:	4630      	mov	r0, r6
  htim10.Init.Period = 62499;
 8002340:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002342:	f7ff fc35 	bl	8001bb0 <HAL_TIM_Base_Init>
 8002346:	b100      	cbz	r0, 800234a <main+0x182>
 8002348:	e7fe      	b.n	8002348 <main+0x180>
  htim11.Instance = TIM11;
 800234a:	4b3c      	ldr	r3, [pc, #240]	; (800243c <main+0x274>)
 800234c:	4a3c      	ldr	r2, [pc, #240]	; (8002440 <main+0x278>)
 800234e:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002350:	6058      	str	r0, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002352:	6098      	str	r0, [r3, #8]
  htim11.Init.Period = 79;
 8002354:	224f      	movs	r2, #79	; 0x4f
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	6118      	str	r0, [r3, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002358:	4618      	mov	r0, r3
  htim11.Init.Period = 79;
 800235a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800235c:	f7ff fc28 	bl	8001bb0 <HAL_TIM_Base_Init>
 8002360:	b100      	cbz	r0, 8002364 <main+0x19c>
 8002362:	e7fe      	b.n	8002362 <main+0x19a>
  HAL_ADC_Start_IT(&hadc1);
 8002364:	4620      	mov	r0, r4
 8002366:	f7fe fdb1 	bl	8000ecc <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 800236a:	4630      	mov	r0, r6
 800236c:	f7ff fb0c 	bl	8001988 <HAL_TIM_Base_Start_IT>
  TextLCD_Init(&lcd, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_RW_Pin, LCD_E_Pin, LCD_D0_GPIO_Port, (LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin));
 8002370:	2304      	movs	r3, #4
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	462a      	mov	r2, r5
 8002376:	f8cd 8008 	str.w	r8, [sp, #8]
 800237a:	9701      	str	r7, [sp, #4]
 800237c:	464b      	mov	r3, r9
 800237e:	4926      	ldr	r1, [pc, #152]	; (8002418 <main+0x250>)
 8002380:	4830      	ldr	r0, [pc, #192]	; (8002444 <main+0x27c>)
	TextLCD_Clear(&lcd);
 8002382:	4c30      	ldr	r4, [pc, #192]	; (8002444 <main+0x27c>)
	TextLCD_Puts(&lcd, "C");
 8002384:	4d30      	ldr	r5, [pc, #192]	; (8002448 <main+0x280>)
  TextLCD_Init(&lcd, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_RW_Pin, LCD_E_Pin, LCD_D0_GPIO_Port, (LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin));
 8002386:	f7ff fdc0 	bl	8001f0a <TextLCD_Init>
	calcTemps();
 800238a:	f7ff fee5 	bl	8002158 <calcTemps>
	TextLCD_Clear(&lcd);
 800238e:	4620      	mov	r0, r4
 8002390:	f7ff fe02 	bl	8001f98 <TextLCD_Clear>
	TextLCD_Position(&lcd, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	4611      	mov	r1, r2
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff fe06 	bl	8001faa <TextLCD_Position>
	TextLCD_Puts(&lcd,"CPU: ");
 800239e:	4620      	mov	r0, r4
 80023a0:	492a      	ldr	r1, [pc, #168]	; (800244c <main+0x284>)
 80023a2:	f7ff fe2d 	bl	8002000 <TextLCD_Puts>
	TextLCD_PutInt(&lcd, cpuTemp);
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <main+0x288>)
 80023a8:	4620      	mov	r0, r4
 80023aa:	6819      	ldr	r1, [r3, #0]
 80023ac:	f7ff fe12 	bl	8001fd4 <TextLCD_PutInt>
	TextLCD_Putchar(&lcd, 0xdf);
 80023b0:	4620      	mov	r0, r4
 80023b2:	21df      	movs	r1, #223	; 0xdf
 80023b4:	f7ff fe06 	bl	8001fc4 <TextLCD_Putchar>
	TextLCD_Puts(&lcd, "C");
 80023b8:	4629      	mov	r1, r5
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7ff fe20 	bl	8002000 <TextLCD_Puts>
	TextLCD_Position(&lcd, 11, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	4620      	mov	r0, r4
 80023c4:	210b      	movs	r1, #11
 80023c6:	f7ff fdf0 	bl	8001faa <TextLCD_Position>
	TextLCD_PutInt(&lcd, termV);
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <main+0x28c>)
 80023cc:	4620      	mov	r0, r4
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	f7ff fe00 	bl	8001fd4 <TextLCD_PutInt>
	TextLCD_Position(&lcd, 0, 1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	4620      	mov	r0, r4
 80023d8:	2100      	movs	r1, #0
 80023da:	f7ff fde6 	bl	8001faa <TextLCD_Position>
	TextLCD_Puts(&lcd,"RUMSTEMP: ");
 80023de:	4620      	mov	r0, r4
 80023e0:	491d      	ldr	r1, [pc, #116]	; (8002458 <main+0x290>)
 80023e2:	f7ff fe0d 	bl	8002000 <TextLCD_Puts>
	TextLCD_PutInt(&lcd, outTemp);
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <main+0x294>)
 80023e8:	4620      	mov	r0, r4
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	f7ff fdf2 	bl	8001fd4 <TextLCD_PutInt>
	TextLCD_Putchar(&lcd, 0xdf);
 80023f0:	4620      	mov	r0, r4
 80023f2:	21df      	movs	r1, #223	; 0xdf
 80023f4:	f7ff fde6 	bl	8001fc4 <TextLCD_Putchar>
	TextLCD_Puts(&lcd, "C");
 80023f8:	4620      	mov	r0, r4
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7ff fe00 	bl	8002000 <TextLCD_Puts>
	HAL_Delay(500);
 8002400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002404:	f7fe fcaa 	bl	8000d5c <HAL_Delay>
 8002408:	e7bf      	b.n	800238a <main+0x1c2>
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40020800 	.word	0x40020800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	10210000 	.word	0x10210000
 8002420:	20000120 	.word	0x20000120
 8002424:	40004400 	.word	0x40004400
 8002428:	200000d8 	.word	0x200000d8
 800242c:	40012000 	.word	0x40012000
 8002430:	0f000001 	.word	0x0f000001
 8002434:	2000009c 	.word	0x2000009c
 8002438:	40014400 	.word	0x40014400
 800243c:	2000004c 	.word	0x2000004c
 8002440:	40014800 	.word	0x40014800
 8002444:	20000088 	.word	0x20000088
 8002448:	0800271e 	.word	0x0800271e
 800244c:	08002718 	.word	0x08002718
 8002450:	2000002c 	.word	0x2000002c
 8002454:	20000040 	.word	0x20000040
 8002458:	08002720 	.word	0x08002720
 800245c:	20000038 	.word	0x20000038

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002462:	2007      	movs	r0, #7
 8002464:	f7fe feca 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	4611      	mov	r1, r2
 800246c:	f06f 000b 	mvn.w	r0, #11
 8002470:	f7fe fed6 	bl	8001220 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	4611      	mov	r1, r2
 8002478:	f06f 000a 	mvn.w	r0, #10
 800247c:	f7fe fed0 	bl	8001220 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	4611      	mov	r1, r2
 8002484:	f06f 0009 	mvn.w	r0, #9
 8002488:	f7fe feca 	bl	8001220 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	4611      	mov	r1, r2
 8002490:	f06f 0004 	mvn.w	r0, #4
 8002494:	f7fe fec4 	bl	8001220 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	4611      	mov	r1, r2
 800249c:	f06f 0003 	mvn.w	r0, #3
 80024a0:	f7fe febe 	bl	8001220 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	4611      	mov	r1, r2
 80024a8:	f06f 0001 	mvn.w	r0, #1
 80024ac:	f7fe feb8 	bl	8001220 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	4611      	mov	r1, r2
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024bc:	f7fe beb0 	b.w	8001220 <HAL_NVIC_SetPriority>

080024c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80024c2:	6802      	ldr	r2, [r0, #0]
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_ADC_MspInit+0x4c>)
 80024c6:	429a      	cmp	r2, r3
{
 80024c8:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 80024ca:	d11d      	bne.n	8002508 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024cc:	2400      	movs	r4, #0
 80024ce:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80024d2:	9400      	str	r4, [sp, #0]
 80024d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = NTC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(NTC_GPIO_Port, &GPIO_InitStruct);
 80024d6:	480e      	ldr	r0, [pc, #56]	; (8002510 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = NTC_Pin;
 80024ea:	2301      	movs	r3, #1
 80024ec:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(NTC_GPIO_Port, &GPIO_InitStruct);
 80024ee:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f0:	2303      	movs	r3, #3
 80024f2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(NTC_GPIO_Port, &GPIO_InitStruct);
 80024f4:	f7fe fefc 	bl	80012f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024f8:	2012      	movs	r0, #18
 80024fa:	4622      	mov	r2, r4
 80024fc:	4621      	mov	r1, r4
 80024fe:	f7fe fe8f 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002502:	2012      	movs	r0, #18
 8002504:	f7fe fec0 	bl	8001288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002508:	b006      	add	sp, #24
 800250a:	bd10      	pop	{r4, pc}
 800250c:	40012000 	.word	0x40012000
 8002510:	40020000 	.word	0x40020000

08002514 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002514:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM10)
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	4a16      	ldr	r2, [pc, #88]	; (8002574 <HAL_TIM_Base_MspInit+0x60>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d115      	bne.n	800254a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800251e:	2200      	movs	r2, #0
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_TIM_Base_MspInit+0x64>)
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002526:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800252a:	6459      	str	r1, [r3, #68]	; 0x44
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	9300      	str	r3, [sp, #0]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002534:	2019      	movs	r0, #25
 8002536:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002538:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800253a:	f7fe fe71 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800253e:	2019      	movs	r0, #25
  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002540:	f7fe fea2 	bl	8001288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002544:	b003      	add	sp, #12
 8002546:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM11)
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_TIM_Base_MspInit+0x68>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d1f9      	bne.n	8002544 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002550:	2200      	movs	r2, #0
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_TIM_Base_MspInit+0x64>)
 8002554:	9201      	str	r2, [sp, #4]
 8002556:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002558:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800255c:	6459      	str	r1, [r3, #68]	; 0x44
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002564:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002566:	201a      	movs	r0, #26
 8002568:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 800256a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800256c:	f7fe fe58 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002570:	201a      	movs	r0, #26
 8002572:	e7e5      	b.n	8002540 <HAL_TIM_Base_MspInit+0x2c>
 8002574:	40014400 	.word	0x40014400
 8002578:	40023800 	.word	0x40023800
 800257c:	40014800 	.word	0x40014800

08002580 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002582:	6802      	ldr	r2, [r0, #0]
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_UART_MspInit+0x40>)
 8002586:	429a      	cmp	r2, r3
 8002588:	d117      	bne.n	80025ba <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_UART_MspInit+0x44>)
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	480d      	ldr	r0, [pc, #52]	; (80025c8 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002594:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002598:	6411      	str	r1, [r2, #64]	; 0x40
 800259a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	9303      	str	r3, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800259e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80025a2:	9200      	str	r2, [sp, #0]
 80025a4:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025a8:	220c      	movs	r2, #12
 80025aa:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f7fe fe9b 	bl	80012f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025ba:	b007      	add	sp, #28
 80025bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80025c0:	40004400 	.word	0x40004400
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020000 	.word	0x40020000

080025cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80025cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ce:	f7fe fbb3 	bl	8000d38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80025d6:	f7fe be86 	b.w	80012e6 <HAL_SYSTICK_IRQHandler>
	...

080025dc <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025dc:	4801      	ldr	r0, [pc, #4]	; (80025e4 <ADC_IRQHandler+0x8>)
 80025de:	f7fe bce0 	b.w	8000fa2 <HAL_ADC_IRQHandler>
 80025e2:	bf00      	nop
 80025e4:	200000d8 	.word	0x200000d8

080025e8 <TIM1_UP_TIM10_IRQHandler>:
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	sTick++;
 80025e8:	4a03      	ldr	r2, [pc, #12]	; (80025f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80025ea:	4804      	ldr	r0, [pc, #16]	; (80025fc <TIM1_UP_TIM10_IRQHandler+0x14>)
	sTick++;
 80025ec:	6813      	ldr	r3, [r2, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	6013      	str	r3, [r2, #0]
  HAL_TIM_IRQHandler(&htim10);
 80025f2:	f7ff b9ee 	b.w	80019d2 <HAL_TIM_IRQHandler>
 80025f6:	bf00      	nop
 80025f8:	2000003c 	.word	0x2000003c
 80025fc:	2000009c 	.word	0x2000009c

08002600 <TIM1_TRG_COM_TIM11_IRQHandler>:
* @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
*/
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	usTick++;
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002602:	4804      	ldr	r0, [pc, #16]	; (8002614 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
	usTick++;
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	6013      	str	r3, [r2, #0]
  HAL_TIM_IRQHandler(&htim11);
 800260a:	f7ff b9e2 	b.w	80019d2 <HAL_TIM_IRQHandler>
 800260e:	bf00      	nop
 8002610:	20000028 	.word	0x20000028
 8002614:	2000004c 	.word	0x2000004c

08002618 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002618:	490f      	ldr	r1, [pc, #60]	; (8002658 <SystemInit+0x40>)
 800261a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800261e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <SystemInit+0x44>)
 8002628:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800262a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002632:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800263a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800263e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <SystemInit+0x48>)
 8002642:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800264a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800264c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800264e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002652:	608b      	str	r3, [r1, #8]
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	40023800 	.word	0x40023800
 8002660:	24003010 	.word	0x24003010

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800269c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800266a:	e003      	b.n	8002674 <LoopCopyDataInit>

0800266c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800266e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002672:	3104      	adds	r1, #4

08002674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002674:	480b      	ldr	r0, [pc, #44]	; (80026a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800267a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800267c:	d3f6      	bcc.n	800266c <CopyDataInit>
  ldr  r2, =_sbss
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002680:	e002      	b.n	8002688 <LoopFillZerobss>

08002682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002684:	f842 3b04 	str.w	r3, [r2], #4

08002688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800268a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800268c:	d3f9      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800268e:	f7ff ffc3 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f000 f811 	bl	80026b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7ff fd97 	bl	80021c8 <main>
  bx  lr    
 800269a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800269c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80026a0:	08002754 	.word	0x08002754
  ldr  r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026a8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80026ac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80026b0:	20000160 	.word	0x20000160

080026b4 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <BusFault_Handler>
	...

080026b8 <__libc_init_array>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	4e0d      	ldr	r6, [pc, #52]	; (80026f0 <__libc_init_array+0x38>)
 80026bc:	4c0d      	ldr	r4, [pc, #52]	; (80026f4 <__libc_init_array+0x3c>)
 80026be:	1ba4      	subs	r4, r4, r6
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	2500      	movs	r5, #0
 80026c4:	42a5      	cmp	r5, r4
 80026c6:	d109      	bne.n	80026dc <__libc_init_array+0x24>
 80026c8:	4e0b      	ldr	r6, [pc, #44]	; (80026f8 <__libc_init_array+0x40>)
 80026ca:	4c0c      	ldr	r4, [pc, #48]	; (80026fc <__libc_init_array+0x44>)
 80026cc:	f000 f818 	bl	8002700 <_init>
 80026d0:	1ba4      	subs	r4, r4, r6
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	2500      	movs	r5, #0
 80026d6:	42a5      	cmp	r5, r4
 80026d8:	d105      	bne.n	80026e6 <__libc_init_array+0x2e>
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026e0:	4798      	blx	r3
 80026e2:	3501      	adds	r5, #1
 80026e4:	e7ee      	b.n	80026c4 <__libc_init_array+0xc>
 80026e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ea:	4798      	blx	r3
 80026ec:	3501      	adds	r5, #1
 80026ee:	e7f2      	b.n	80026d6 <__libc_init_array+0x1e>
 80026f0:	0800274c 	.word	0x0800274c
 80026f4:	0800274c 	.word	0x0800274c
 80026f8:	0800274c 	.word	0x0800274c
 80026fc:	08002750 	.word	0x08002750

08002700 <_init>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

0800270c <_fini>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr
